#+Title: Emac's Setup
#+STARTUP: content inlineimages
#+PROPERTY: header-args:emacs-lisp :results output silent :tangle ~/.emacs

* Benchmarking Emacs Boot time
Benchmark Emacs startup time
#+begin_src emacs-lisp
  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  ;; Profile emacs startup
  (add-hook
   'emacs-startup-hook
   (lambda ()
     (message "*** Emacs loaded in %s seconds with %d garbage collections."
  	    (emacs-init-time "%.2f")
  	    gcs-done)))
#+end_src

* Basic Emacs Settings
#+begin_src emacs-lisp 
  ;; Emacs options for different things

  ;; (setq-default tab-width 2) 
  ;; (setq-default standard-indent 2) 

  (setq inhibit-splash-screen t)
  (add-to-list 'default-frame-alist '(fullscreen . fullboth))
  ;; (custom-set-variables
  ;;  '(initial-frame-alist (quote ((fullscreen . fullboth)))))
  (setq make-backup-files nil)
  (toggle-scroll-bar -1)
  (tool-bar-mode     -1)
  (menu-bar-mode     -1)
  (global-auto-revert-mode 1)
  ;;(if (display-graphic-p)
  ;;    (progn (menu-bar-mode     -1)))
  (tooltip-mode      -1)
  (setq make-backup-files nil) ; stop creating backup~ files
  (setq auto-save-default nil) ; stop creating #autosave# files
  (setq package-enable-at-startup nil)
  (setq vc-follow-symlinks nil)
  ;; Trying to speed up emacs load
  (setq jit-lock-stealth-time nil)
  (setq jit-lock-defer-time nil)
  (setq jit-lock-defer-time 0.05)
  (setq jit-lock-stealth-load 200)
  (setq indent-tabs-mode nil)
  (setq custom-file (concat user-emacs-directory "custom.el"))
  (setq switch-to-buffer-obey-display-actions t)
  ;; disable scrollbars
  (customize-set-variable 'scroll-bar-mode nil)
  (customize-set-variable 'horizontal-scroll-bar-mode nil)
  (setq browse-url-browser-function 'browse-url-default-browser)

  (set-face-attribute 'default nil :font "JetBrains Mono" :height 120)

  ;;doesn't work as expected
  ;;(add-to-list 'default-frame-alist '(undecorated . t))
  (defalias 'yes-or-no-p 'y-or-n-p)

#+end_src

* Package Manager
** Straight.el
Using Straight.el for package management.
#+begin_src emacs-lisp 
  (setq straight-vc-git-default-clone-depth 1)
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
  	(url-retrieve-synchronously
  	 "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
  	 'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
  ;;  (setq use-package-always-defer t)
#+end_src

* Mac OS X Specifics 
#+begin_src emacs-lisp
  (when (memq window-system '(mac ns x))
    (use-package exec-path-from-shell
      :init (exec-path-from-shell-initialize))
    (setq mac-command-modifier 'control))
  ;;(setq mac-command-modifier 'meta))
#+end_src

* Evil Mode
Evil mode for keybinding and most of efficiency goodness

#+begin_src emacs-lisp
  ;; enable evil mode
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-d-scroll t)
    (setq evil-want-C-i-jump nil)
    ;; (setq evil-undo-system 'undo-tree)
    (setq evil-insert-state-cursor '(bar))
    (setq evil-normal-state-cursor '(box))
    ;;(setq evil-motion-state-modes (append evil-emacs-state-modes evil-motion-state-modes))
    ;;(setq evil-emacs-state-modes nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
    ;;(evil-set-initial-state 'messages-buffer-mode 'normal)
    ;;(evil-set-initial-state 'dashboard-mode 'normal)
    )

  (use-package evil-collection
    ;; :custom (evil-collection-setup-minibuffer t)
    :after evil
    :config
    (evil-collection-init)
    (with-eval-after-load 'org-agenda
      (define-key org-agenda-mode-map "j" 'org-agenda-next-line)
      (define-key org-agenda-mode-map "k" 'org-agenda-previous-line)))

  (use-package evil-org)
  (use-package evil-nerd-commenter
    :bind ("M-;" . 'evilnc-comment-or-uncomment-lines))
  (use-package evil-surround
    :after evil
    :config
    (global-evil-surround-mode 1))
  (use-package evil-snipe
    :init (evil-snipe-mode 1))
  (use-package evil-matchit
    :after evil
    :init
    (setq evilmi-shortcut "M-m")
    (global-evil-matchit-mode 1))
  (use-package evil-lion
    :after evil
    :config
    (evil-lion-mode))
  (use-package evil-numbers
    :after evil)
  (use-package vimish-fold
    :after evil)
  (use-package evil-vimish-fold
    :after vimish-fold
    :hook ((prog-mode conf-mode text-mode) . evil-vimish-fold-mode))
  (define-key evil-normal-state-map (kbd "C-=") 'evil-numbers/inc-at-pt)
  (define-key evil-visual-state-map (kbd "C-=") 'evil-numbers/inc-at-pt)
  (define-key evil-normal-state-map (kbd "C--") 'evil-numbers/dec-at-pt)
  (define-key evil-visual-state-map (kbd "C--") 'evil-numbers/dec-at-pt)

  (defun ta/enter-insert-state-hook ()
    (hl-line-mode -1)
    ;;(set-cursor-color "#ff4c4c")
    )
  (add-hook 'evil-insert-state-entry-hook 'ta/enter-insert-state-hook)
  (add-hook 'evil-replace-state-entry-hook 'ta/enter-insert-state-hook)
#+end_src

* Useful packages
For using getting around and understanding Emacs
** Helper Packages
For extending Emacs functionality
#+begin_src emacs-lisp

  ;;some helper packages
  ;;Undo/Redo in Emacs
  ;;notified if the definition of a function you are customizing change
  (use-package el-patch)
  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init (savehist-mode))
  ;; a better window manager?
  (use-package ace-window
    :bind ("C-c o" . 'ace-window)
    :init
    (setq aw-dispatch-always t)
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
  ;; divides search pattern into space separated components
  ;; Optionally use the `orderless' completion style.
  (use-package orderless
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))
  ;; what key should you push next? not needed embark
  (use-package which-key
    :init (which-key-mode))
  ;; Enable rich annotations using the Marginalia package
  (use-package marginalia
    ;; Either bind `marginalia-cycle' globally or only in the minibuffer
    :bind (("M-A" . marginalia-cycle)
  	 :map minibuffer-local-map
  	 ("M-A" . marginalia-cycle))
    :init
    (marginalia-mode))
  (use-package restart-emacs)
  (use-package default-text-scale)
#+end_src
** Customize Keyboard Shortcuts
#+begin_src emacs-lisp
  ;; Customize your keyboard shortcuts
  (use-package hydra)
  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  (global-set-key
   (kbd "C-x o")
   (lambda () (interactive)
     (switch-to-buffer
      (other-buffer (current-buffer) 1))))

  (defun beginning-of-file-and-line ()
    "Go to the beginning of the file and then to the beginning of the line."
    (interactive)
    (beginning-of-buffer) ;; or use (goto-char (point-min)) for strictly beginning of buffer
    (beginning-of-line))

  (defun end-of-file-and-line ()
    "Go to the end of the file and then to the end of the line."
    (interactive)
    (end-of-buffer) ;; or use (goto-char (point-max)) for strictly end of buffer
    (end-of-line))

  ;; Define the keybinding
  (global-set-key (kbd "C-c C-a") 'beginning-of-file-and-line)
  (global-set-key (kbd "C-c C-e") 'end-of-file-and-line)

  (define-key evil-normal-state-map (kbd "gg") 'evil-goto-first-line)
  (define-key evil-normal-state-map (kbd "G") 'evil-goto-line)
  (defun choose-theme ()
    "Interactively choose a theme"
    (interactive)
    (let* ((all-themes (mapcar 'symbol-name (custom-available-themes)))
    	 (theme (completing-read "Load custom theme: " all-themes nil t)))
      (when theme
        (load-theme (intern theme) t))))

  (use-package general
    :config
    (general-create-definer rune/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")
    (rune/leader-keys
      "t"  '(:ignore t :which-key "Toggles")
      "gc" '(copilot-mode                                                     :which-key "Copilot Mode")
      "gp" '(gptel                                                            :which-key "GPT-4")
      "gP" '(gptel-send                                                       :which-key "Send to GPT")
      "ts" '(hydra-text-scale/body                                            :which-key "Scale Text")
      "tt" '(lambda () (interactive)
    	    (mapc #'disable-theme custom-enabled-themes)
    	    (choose-theme)
              :which-key "Choose Theme")
      "tl" '(lambda () (interactive)
    	    (mapc #'disable-theme custom-enabled-themes)
    	    (load-theme 'doom-one-light t)
              :which-key "Light Theme")
      "td" '(lambda () (interactive)
    	    (mapc #'disable-theme custom-enabled-themes)
    	    (load-theme 'doom-moonlight t)
              :which-key "Dark Theme")
      "xb" '(ibuffer                                                          :which-key "ibuffer")
      
      "xv" '(my-project-vterm :which-key "Vterm") 
      "fe" '(lambda() (interactive)(find-file "~/linux-setup/emacs-init.org") :which-key "emacs-init.org")
      "fz" '(lambda() (interactive)(find-file "~/linux-setup/zsh-init.org")   :which-key "zsh-init.org")
      "yn" '(yas-new-snippet                                                  :which-key "New Yasnippet")
      "yr" '(yas-reload-all                                                   :which-key "Yasnippet Reload")
      "yt" '(yas-describe-tables                                              :which-key "Yasnippet Describe")
      "yv" '(lambda() (interactive) yas-snippet-visit-file  :which-key "Visit Yasnippet File")
      ))
  ;;(global-set-key (kbd "C-e") 'end-of-line)
#+end_src 

#+begin_src elisp
  (defun beginning-of-file-and-line ()
    (interactive)
    (goto-char (point-min))
    (beginning-of-line))

  (defun end-of-file-and-line ()
    (interactive)
    (goto-char (point-max))
    (end-of-line))

  (define-key evil-normal-state-map (kbd "gg") 'beginning-of-file-and-line)
  (define-key evil-normal-state-map (kbd "G") 'end-of-file-and-line)
#+end_src

** You Snip It
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :config
    (setq yas-triggers-in-field t)
    ;; (setq yas-next-field-or-maybe-expand nil)
    (setq yas-snippet-dirs '("~/linux-setup/yasnippet" yas-installed-snippets-dir))

    :init 
    (yas-global-mode 1)
    )

  ;; (defun my-yas-try-expanding-auto-snippets ()
  ;;   (when yas-minor-mode
  ;;     (let ((yas-buffer-local-condition ''(require-snippet-condition . auto)))
  ;;       (yas-expand))))
  ;; (add-hook 'post-command-hook #'my-yas-try-expanding-auto-snippets)
#+END_SRC

** Do Stuff in Emacs Easily
#+begin_src emacs-lisp

  ;; Completion frameworks and doing stuff
  (use-package vertico
    :bind (:map
        	 vertico-map
        	 ("C-j" . vertico-next)
        	 ("C-k" . vertico-previous)
        	 ("C-f" . vertico-exit)
        	 :map minibuffer-local-map
        	 ("M-h" . backward-kill-word))
    :custom (vertico-cycle t)
    :init (vertico-mode))

  (use-package vertico-posframe
    :after vertico
    :config
    (add-hook 'vertico-mode-hook #'vertico-posframe-mode))

  (setq vertico-multiform-commands
        '((consult-line
           posframe
           (vertico-posframe-poshandler . posframe-poshandler-frame-top-center)
           (vertico-posframe-border-width . 10)
           (vertico-posframe-fallback-mode . vertico-buffer-mode))
          (t posframe)))

  (vertico-multiform-mode 1)
  (setq vertico-posframe-parameters
        '((left-fringe . 8)
          (right-fringe . 8)))

  (use-package consult
    :bind (("C-c s" . consult-line)
        	 ("C-M-l" . consult-imenu)
        	 ("C-r" . consult-history)
        	 ))

  ;;Do commands and operatioms on buffers or synbols
  (use-package embark
    :bind (("C-c e" . embark-act)
        	 ("M-." . embark-dwim)
        	 ("C-h B" . embark-bindings))
    :init (setq prefix-help-command #'embark-prefix-help-command))

  (use-package embark-consult
    :after (embark consult)
    :hook (embark-collect-mode . consult-preview-at-point-mode))
  (use-package solaire-mode
    :hook (after-init . solaire-global-mode))
#+end_src

** TODO Browse Files
#+begin_src emacs-lisp :tangle no
  (use-package dired
    :straight nil)

  (use-package all-the-icons-dired
    :after dired-sidebar
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired-sidebar
    :bind (("C-x C-n" . dired-sidebar-toggle-sidebar))
    :commands (dired-sidebar-toggle-sidebar)
    :init
    (add-hook 'dired-sidebar-mode-hook
              (lambda ()
                (unless (file-remote-p default-directory)
                  (auto-revert-mode))))
    :config
    (push 'toggle-window-split dired-sidebar-toggle-hidden-commands)
    (push 'rotate-windows dired-sidebar-toggle-hidden-commands)
    (setq dired-sidebar-use-term-integration t))


#+end_src

#+begin_src emacs-lisp :tangle no
  (use-package dired
    :straight nil)

  (use-package all-the-icons-dired
    :after dired-sidebar
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired-sidebar
    :bind (("C-x C-n" . dired-sidebar-toggle-sidebar))
    :commands (dired-sidebar-toggle-sidebar)
    :init
    (add-hook 'dired-sidebar-mode-hook
              (lambda ()
                (unless (file-remote-p default-directory)
                  (auto-revert-mode))))
    :config
    (push 'toggle-window-split dired-sidebar-toggle-hidden-commands)
    (push 'rotate-windows dired-sidebar-toggle-hidden-commands)
    (setq dired-sidebar-use-term-integration t))

  ;; Close the dired-sidebar when file opens
  (with-eval-after-load 'dired
    (defun close-dired-sidebar-find-file ()
      "Close the dired-sidebar when opening a file."
      (interactive)
      (let ((buffer (dired-get-file-for-visit)))
        (dired-sidebar-toggle-sidebar)
        (find-file buffer)))
    (advice-add 'dired-find-file :override #'close-dired-sidebar-find-file))
#+end_src

* Org Mode Setup
Because this is one of the main reasons to use Emacs:
#+begin_src emacs-lisp
  ;; Organize your notes and maybe part of your life
  (use-package org 
    :config
    ;; Define custom SEQ_TODO keywords
    (setq org-todo-keywords
    	'((sequence "CLARIFY(c)" "ORGANIZE(o)" "ENGAGE(e)" "REFLECT(r)")))
    ;; Specify your org files directory and agenda files
    (setq org-directory "~/org")
    (setq org-agenda-files (list org-directory))
    ;; Setup for org-capture
    (setq org-default-notes-file (concat org-directory "~/org/gtd.org"))
    (setq org-capture-templates
    	'(("t" "Todo" entry (file+headline "~/org/gtd.org" "Capture Ideas")
    	   "* CLARIFY %?\n ")))
    (setq org-confirm-babel-evaluate nil)
    (setq org-startup-indented  t)
    (setq org-startup-numerated t)
    (setq org-startup-with-inline-images t)
    (setq org-blank-before-new-entry nil)
    (setq org-hide-emphasis-markers nil)
    (setq org-ellipsis " ▼")
    :hook
    ((org-mode . visual-line-mode)  ; Added this line
     (org-babel-after-execute . org-redisplay-inline-images)))

  (use-package org-roam
    :custom
    (org-roam-directory (file-truename "~/org/roam"))
    :config
    (org-roam-setup))

  (use-package org-roam-ui
    :after org-roam
    ;; Assuming you want the UI available on Emacs startup
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))

  (use-package visual-fill-column
    :custom
    (visual-fill-column-center-text t)
    (visual-fill-column-width 140)
    :hook (org-mode . visual-fill-column-mode))
#+end_src

#+begin_src emacs-lisp 
  ;; (use-package ox-publish
  ;;   :straight nil)

  ;; Org Babel for code blocks
  (use-package ob
    :straight nil
    :after (:all org)
    :init
    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp :tangle no"))
    (add-to-list 'org-structure-template-alist '("hs" . "src haskell"))
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (setq org-confirm-babel-evaluate nil)
    :config

    ;; load more languages for org-babel
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((shell      . t)
       (emacs-lisp . t)
       (dot        . t)
       (python     . t)
       (haskell    . t)
       (scheme     . t)
       )))
#+end_src
#+begin_src emacs-lisp
  ;; Automatically tangle our Emacs.org config file when we save it
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
  		      (expand-file-name "~/linux-setup/emacs-init.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (message "Tangling new .emacs")
        (org-babel-tangle)))
    (when (string-equal (buffer-file-name)
  		      (expand-file-name "~/linux-setup/zsh-init.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (message "Tangling new .zsh")
        (org-babel-tangle))))


  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
#+end_src
#+begin_src emacs-lisp :tangle no
  (use-package markdown-mode)
  (use-package auctex)
#+end_src

* Project Management
Manage your projects

#+begin_src emacs-lisp
  ;; Project management
  (use-package magit)
#+end_src

* Buffer Management

#+begin_src emacs-lisp
  (use-package ibuffer
    :straight nil)

  (use-package ibuf-ext
    :straight nil)

  (add-to-list 'ibuffer-never-show-predicates "^/dired")
  (add-to-list 'ibuffer-never-show-predicates "magit") ; hide Magit buffers

  (setq ibuffer-saved-filter-groups
        (quote (("default"
  	       ("Dotfiles" (filename . "^\\."))
  	       ("Messages"  (name . "^\\/"))
  	       ("Org"       (mode . org-mode))
  	       ("Planner"   (or
  			     (name . "^\\/Calendar\\*$")
  			     (name . "^\\/Org Agenda\\*$")))
  	       ("Emacs"     (or
  			     (name . "^\\/scratch\\*$")
  			     (name . "^\\/Messages\\*$")))))))

  (add-hook 'ibuffer-mode-hook
  	  (lambda ()
  	    (ibuffer-switch-to-saved-filter-groups "default")))
#+end_src

#+begin_src emacs-lisp 
  (use-package perspective
    :bind (
  	 ("C-x C-b" . persp-ibuffer)
  	 ("C-x k" . persp-kill-buffer* ))
    :custom
    (persp-mode-prefix-key (kbd "C-x C-x"))
    :init
    (setq persp-initial-frame-name "Main")
    (persp-mode))
#+end_src 

#+begin_src emacs-lisp
  (use-package project
    :straight nil)
  (use-package popper
    :bind (("C-`"   . popper-toggle)
  	 ("M-`"   . popper-cycle)
  	 ("C-M-`" . popper-toggle-type))
    :init
    ;; have popper respect display-buffer-alist rules
    ;; (setq popper-display-control nil)
    ;; enable actions in echo area (k to kill buffer)
    ;; (setq popper-echo-dispatch-actions t)
    ;; how to group popups
    ;; (setq popper-display-function #'popper-select-popup-at-bottom)
    (setq popper-group-function #'popper-group-by-project)
    ;; which buffers should be considered popups
    (setq popper-window-height 0.33)
    (setq popper-reference-buffers
  	'("\\*ChatGPT\\*"
  	  "\\*scratch\\*"
  	  "\\*?vterm"
  	  help-mode
  	  compilation-mode))
    (popper-mode +1)
    (popper-echo-mode +1))                ; For echo area hints
#+end_src

* Shell Support
#+begin_src emacs-lisp 

  (if (not (eq system-type 'windows-nt))
      (progn
        (use-package vterm
  	:config (setq vterm-max-scrollback 10000))
        (use-package multi-vterm)

        ;; Some fancy project/perspective stuff.
        (defun my-project-vterm ()
  	"Open a `vterm` in the current project's root directory."
  	(interactive)
  	(let ((project-root (project-root (project-current t))))
  	  (if project-root
  	      (let ((default-directory project-root))
  		(vterm (format "vterm: %s" project-root)))
  	    (message "Not in a project!"))))
        ;; (global-set-key (kbd "C-c p v") #'my-project-vterm)
        (defun project-switch-to-perspective ()
  	"Switch to a perspective with the name of the current project."
  	(interactive)
  	(let ((project-name (file-name-nondirectory (directory-file-name (project-root (project-current t))))))
  	  (if (not (persp-switch project-name))
  	      (progn
  		(persp-switch project-name)
  		(dired (project-root (project-current t)))))))
        (global-set-key (kbd "C-x p p") 'project-switch-to-perspective)
        (advice-add 'project-switch-project :after #'project-switch-to-perspective)

        ))

#+end_src
* Programming
** Corfu
#+begin_src emacs-lisp 
  (use-package corfu
    ;; Optional customizations
    :custom
    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    :hook (prog-mode . corfu-mode)
    ;; Enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
    ;; be used globally (M-/).  See also the customization variable
    ;; `global-corfu-modes' to exclude certain modes.
    :init
    (global-corfu-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; TAB cycle if there are only few candidates
    (setq completion-cycle-threshold 3)

    ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
    ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (setq tab-always-indent 'complete))      (use-package corfu
    :straight t
    :config
    ;; Optionally use TAB for cycling, default is `corfu-complete'.
    (setq corfu-cycle t)
    ;; Optionally enable `corfu-mode' in all buffers.
    (global-set-key (kbd "M-RET") #'corfu-complete)
    (setq corfu-quit-at-boundary nil)
    (setq corfu-quit-no-match t))

  ;; Use Dabbrev with Corfu!
  (use-package dabbrev
    ;; Swap M-/ and C-M-/
    :bind (("M-/" . dabbrev-completion)
           ("C-M-/" . dabbrev-expand))
    :config
    (add-to-list 'dabbrev-ignored-buffer-regexps "\\` ")
    ;; Since 29.1, use `dabbrev-ignored-buffer-regexps' on older.
    (add-to-list 'dabbrev-ignored-buffer-modes 'doc-view-mode)
    (add-to-list 'dabbrev-ignored-buffer-modes 'pdf-view-mode))

  (use-package eglot
    :config
    (setq eglot-autoshutdown t)
    (add-to-list 'eglot-server-programs '(haskell-mode . ("ghcide" "--lsp"))))

  (use-package nix-mode
    :mode "\\.nix\\'")
  (use-package haskell-mode
    :mode "\\.hs\\'")

#+end_src
** Copilot 
#+begin_src emacs-lisp 
  (use-package copilot
    :straight (:host github :repo "copilot-emacs/copilot.el" :files ("dist" "*.el"))
    :init (setq copilot-indent-offset-warning-disable t)
    :bind (:map copilot-completion-map
  	      ("M-<tab>" . 'copilot-accept-completion)
  	      ("M-TAB" . 'copilot-accept-completion)
  	      ("TAB" . 'copilot-accept-completion-by-word)
  	      ("<tab>" . 'copilot-accept-completion-by-word)))

#+end_src
** TODO Cape
** GPTEL 
#+begin_src emacs-lisp
  (use-package gptel
    :custom
    (gptel-model "gpt-3.5-turbo")
    (gptel-default-mode 'org-mode)
    (gptel-prompt-prefix-alist
     '((markdown-mode . "# ")
       (org-mode . "* ")
       (text-mode . "# ")))
    :config
    (add-hook 'gptel-post-stream-hook 'gptel-auto-scroll)
    (add-hook 'gptel-post-response-functions 'gptel-end-of-response))

#+end_src
* PDFs
#+begin_src emacs-lisp 
  (use-package pdf-tools
    :config
    (pdf-tools-install)
    
    ;; enable midnight mode for dark theme
    (add-hook 'pdf-view-mode-hook 'pdf-view-midnight-minor-mode)
    
    ;; disable blinking
    (add-hook 'pdf-view-mode-hook (lambda ()
  				  (set (make-local-variable 'blink-cursor-mode) nil)))

    ;; unbind q key
    ;; (define-key pdf-view-mode-map (kbd "q") nil)
    
    (setq-default pdf-view-display-size 'fit-page)
    (setq pdf-annot-activate-created-annotations t)
    :bind
    :custom
    (pdf-view-resize-factor 1.0))
#+end_src

* Themes
#+begin_src emacs-lisp 
  ;; themes at the end
  (if (display-graphic-p)
      (progn
        (use-package ef-themes)
        
        (use-package modus-themes)

        (use-package all-the-icons)

        ;; (use-package doom-modeline
        ;; 	:init (doom-modeline-mode nil))

        (use-package telephone-line
  	:init
  	(setq telephone-line-primary-left-separator 'telephone-line-cubed-left
  	      telephone-line-secondary-left-separator 'telephone-line-cubed-hollow-left
  	      telephone-line-primary-right-separator 'telephone-line-cubed-right
  	      telephone-line-secondary-right-separator 'telephone-line-cubed-hollow-right)
  	(setq telephone-line-height 24
  	      telephone-line-evil-use-short-tag t))

        (use-package doom-themes
  	:config
  	;; Global settings (defaults)
  	(setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
  	      doom-themes-enable-italic t) ; if nil, italics is universally disabled
  	;; (load-theme 'doom-nova)
  	;; Enable flashing mode-line on errors
  	(doom-themes-visual-bell-config)
  	;; Enable custom neotree theme (all-the-icons must be installed!)
  	;;(doom-themes-neotree-config)
  	;; or for treemacs users
  	(setq doom-themes-treemacs-theme "doom-colors") ; use "doom-colors" for less minimal icon theme
  	;;(doom-themes-treemacs-config)
  	;; Corrects (and improves) org-mode's native fontification.
  	(doom-themes-org-config))

        (telephone-line-mode t)
        ))
#+end_src
** Dealing with Parentheses
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

  (use-package smartparens
    :straight t
    :config
    (require 'smartparens-config)
    (smartparens-global-mode 1))

  (use-package highlight-parentheses
    :config
    (define-globalized-minor-mode global-highlight-parentheses-mode
      highlight-parentheses-mode
      (lambda () (highlight-parentheses-mode t)))
    (global-highlight-parentheses-mode t))

  (setq blink-matching-paren t)
#+end_src 

* TODO Literate Programming
#+begin_src python :results output
  import random, sys
  random.seed(1)
  print(sys.version)
  print("Hello world!!! Here is a random number: %f" % random.random())
#+end_src

#+RESULTS:
: zsh:1: command not found: python
: [ Babel evaluation exited with code 127 ]

* TODO Publish Website with notes
#+begin_src emacs-lisp
  (setq org-publish-project-alist
        `(("pages"
  	 :base-directory "~/taingram.org/org/"
  	 :base-extension "org"
  	 :recursive t
  	 :publishing-directory "~/taingram.or/html/"
  	 :publishing-function org-html-publish-to-html)

  	("static"
  	 :base-directory "~/taingram.org/org/"
  	 :base-extension "css\\|txt\\|jpg\\|gif\\|png"
  	 :recursive t
  	 :publishing-directory  "~/taingram.org/html/"
  	 :publishing-function org-publish-attachment)

  	("taingram.org" :components ("pages" "static"))))
#+end_src

* TODO Web Browsing
#+begin_src emacs-lisp :tangle no
  (use-package xwidget-webkit 
    :ensure nil ; Ensure nil because xwidget is not a installable package
    :bind ("C-c w" . xwidget-webkit-browse-url))
#+end_src

* Scratch Area
#+begin_src emacs-lisp :tangle no
  (use-package pdf-tools
    :config
    (pdf-tools-install)
    :bind ("q" . nil)
    :custom
    (pdf-view-resize-factor 1.2)
    (color-theme "onedark")
    (font-face "courier")
    (blink-cursor-mode nil)
    (midnight-mode t))

  (use-package pdf-tools
    :config (pdf-tools-install))

  (defun pdf-view-mode-hook ()
    (setq-default pdf-view-display-size 'fit-page)
    (setq pdf-annot-activate-created-annotations t)
    (bind ("q" . nil)))
#+end_src

#+begin_src emacs-lisp :tangle no
  (gptel-make-ollama "Ollama"             ;Any name of your choosing
    :host "localhost:11434"               ;Where it's running
    :stream t                             ;Stream responses
    :models '("mistral:latest"))          ;List of models
  ;; OPTIONAL configuration
  (setq-default
   gptel-model "llama2"
   gptel-backend (gptel-make-ollama "Ollama"
                   :host "127.0.0.1:11434"
                   :stream t
                   :models '("mistral:latest")))
#+end_src

#+begin_src emacs-lisp :tangle no :tangle no
  (defun get-buffer-path ()
    "Get the path of the current buffer and copy it to the clipboard"
    (interactive)
    (let ((path (buffer-file-name)))
      (when path
        (kill-new path)
        (message "Path '%s' copied to the clipboard" path)))
    )  
#+end_src

#+begin_src emacs-lisp 
  (defun my-org-get-sanitized-file-name (heading-text)
    "Return a sanitized, title-cased file name from HEADING-TEXT."
    (let* ((title-case-heading (s-titleize heading-text))
           (sanitized-heading (replace-regexp-in-string "[^[:alnum:]]" "" title-case-heading)))
      (concat org-directory "/" sanitized-heading ".org")))

  (defun my-org-create-file (file-name heading-text)
    "Create an Org file named FILE-NAME with initial content from HEADING-TEXT."
    (when (not (file-exists-p file-name))
      (with-temp-buffer
        (insert (concat "* " heading-text "\n\n"))
        (write-file file-name))
      (message "Created file: %s" file-name)))

  (defun my-org-add-link-property (file-name)
    "Add a property to the current heading with a link to FILE-NAME."
    (let ((file-link (format "file:%s" file-name)))
      ;; (org-set-property "FILE_LINK" file-link)
      ;; Optionally, insert a clickable link below the heading
      (let ((link-text (format "[[%s][%s file]]\n" file-link "View")))
        (org-back-to-heading t)
        (forward-line 1)
        (insert link-text))))

  (defun my-org-move-heading-to-status ()
    "Prompt user to move the current heading to a 'Project Status' or 'Research Status' section."
    (let ((choice (completing-read "Move to: " '("Project Status" "Research Status"))))
      (org-cut-subtree)
      (save-excursion
        (goto-char (point-min))
        (if (search-forward-regexp (concat "^\\* " choice) nil t)
            (progn
              (goto-char (match-end 0))
              (org-paste-subtree))
          (message "Status section not found.")))))

  (defun my-org-process-heading ()
    "Process the current heading based on its TODO state."
    (when (equal org-state "ORGANIZE")
      (let* ((heading-text (nth 4 (org-heading-components)))
             (file-name (my-org-get-sanitized-file-name heading-text)))
        (my-org-create-file file-name heading-text)
        (my-org-add-link-property file-name)
        (my-org-move-heading-to-status))))

  (add-hook 'org-after-todo-state-change-hook 'my-org-process-heading)
#+end_src

#+BEGIN_SRC emacs-lisp 
  (use-package s)
  (defun my-org-open-at-point-same-window (orig-fun &rest args)
    "Advise `org-open-at-point' to open links in the same window."
    (let ((org-link-frame-setup (cons '(file . find-file) org-link-frame-setup)))
      (apply orig-fun args)))
  (advice-add 'org-open-at-point :around #'my-org-open-at-point-same-window)
#+END_SRC


#+BEGIN_SRC emacs-lisp 
  (use-package lorem-ipsum
    :ensure t
    :config
    (lorem-ipsum-use-default-bindings))
#+END_SRC
