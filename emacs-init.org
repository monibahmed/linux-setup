#+Title: Emac's Setup
#+STARTUP: content inlineimages
#+PROPERTY: header-args:emacs-lisp :results output silent :tangle ~/.emacs

* Basic Setup 
#+BEGIN_SRC emacs-lisp
  ;; Initialize straight.el package manager
  (setq straight-use-package-by-default t)

  ;; Bootstrap straight.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
  	(url-retrieve-synchronously
  	 "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
  	 'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ;; Install use-package via straight.el
  (straight-use-package 'use-package)

  ;; Optional: Basic UI tweaks
  (menu-bar-mode -1)       ;; Disable menu bar
  (tool-bar-mode -1)       ;; Disable toolbar
  (scroll-bar-mode -1)     ;; Disable scrollbar
  (setq inhibit-startup-screen t) ;; Disable startup screen

  ;; Optional: Basic editor settings
  (setq make-backup-files nil) ;; Disable backup files
  (setq auto-save-default nil) ;; Disable auto-save
  (setq ring-bell-function 'ignore) ;; Silence bell
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; Add more packages here using (use-package ...)
#+END_SRC
* Evil Mode
#+BEGIN_SRC emacs-lisp
  ;; Install and configure evil-mode
  (use-package evil
    :init
    (setq evil-want-integration t) ;; This is optional since it's enabled by default
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t) ;; Enables Vim-like scrolling with Ctrl+u and Ctrl+d
    (setq evil-want-C-i-jump nil) ;; Avoids conflicts with TAB behavior in Emacs
    :config
    (evil-define-key 'normal 'global
      (kbd "C-c p s") 'persp-switch    ;; Switch to another perspective (workspace)
      (kbd "C-c p k") 'persp-kill      ;; Kill a perspective
      (kbd "C-c p n") 'persp-next      ;; Move to the next perspective
      (kbd "C-c p p") 'persp-prev)     ;; Move to the previous perspective
    (evil-mode 1))

  ;; Optionally, you might want to add evil-collection for better integration with Emacs' built-in packages
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  ;; Install evil-org for Vim keybindings in org-mode
  (use-package evil-org
    :after (org evil)
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (evil-org-set-key-theme '(navigation insert textobjects additional calendar))
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))

  ;; Optional: Use evil-collection to enhance evil bindings across Emacs packages
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  ;; Enable evil-mode in all buffers by default
  (setq evil-default-state 'normal)
#+END_SRC
* Buffer Management
#+BEGIN_SRC emacs-lisp
  ;; Install and configure Consult for enhanced buffer switching
  (use-package consult
    :bind (("C-x b" . consult-buffer)   ;; Replaces the default buffer list
  	 ("C-x C-b" . consult-buffer) ;; Also remap C-x C-b
  	 ("M-y" . consult-yank-pop)   ;; Enhanced yank (paste) menu
  	 ("C-s" . consult-line)       ;; Search within current buffer
  	 ("C-M-l" . consult-imenu)    ;; Jump to headings or sections
  	 ("M-g M-g" . consult-goto-line)) ;; Go to line with preview
    :config
    ;; Customize consult-buffer to put the previous buffer first
    (setq consult-buffer-sources
  	'(consult--source-hidden-buffer  ;; Hidden buffers (optional)
  	  consult--source-buffer         ;; Buffers
  	  consult--source-recent-file    ;; Recent files
  	  consult--source-bookmark)))    ;; Bookmarks

  ;; Add an advice to prioritize the last used buffer
  (advice-add 'consult--source-buffer :filter-return
  	    (lambda (buffers)
  	      (let ((previous-buffer (other-buffer (current-buffer) t)))
  		(if (memq previous-buffer buffers)
  		    (cons previous-buffer (remove previous-buffer buffers))
  		  buffers))))

  ;; Enable consult for buffer switching with Vertico
  (use-package vertico
    :bind (:map
  	 vertico-map
  	 ("C-j" . vertico-next)
  	 ("C-k" . vertico-previous)
  	 :map minibuffer-local-map
  	 ("M-h" . backward-kill-word))
    :custom (vertico-cycle t)
    :init (vertico-mode))

  ;; Install and configure Orderless for flexible completion
  (use-package orderless
    :straight t
    :init
    ;; Set Orderless as the default completion style
    (setq completion-styles '(orderless)
  	completion-category-defaults nil
  	completion-category-overrides '((file (styles partial-completion))))) ;; Partial completion for file paths

  ;; Install and configure Embark for context-aware actions
  (use-package embark
    :bind
    (("C-." . embark-act)         ;; Press C-. to trigger actions on the selected item
     ("C-;" . embark-dwim)        ;; C-; for "Do What I Mean" smart context menu
     ("C-h B" . embark-bindings)) ;; Show all keybindings available for the current context
    :init
    ;; Set embark-act as the prefix-help-command to show Embark's help when pressing the prefix
    (setq prefix-help-command #'embark-prefix-help-command))

  ;; Integrate Embark with Consult for a smoother experience
  (use-package embark-consult
    :after (embark consult)
    :hook
    (embark-collect-mode . consult-preview-at-point-mode)) ;; Show previews for consult commands in embark collect
#+END_SRC
* Project Management
#+BEGIN_SRC emacs-lisp
  ;; Install and configure perspective.el with persistence
  (use-package perspective
    :bind
    ("C-x C-b" . persp-list-buffers)         ; or use a nicer switcher, see below
    :straight t
    :custom
    (persp-mode-prefix-key (kbd "C-c p")) ;; Change prefix if needed
    (persp-state-default-file "~/.emacs.d/persp-state") ;; File to save workspace state
    (persp-mode t)
    (persp-mode-save-state-on-exit t) ;; Auto-save when exiting Emacs
    :config
    (persp-mode))

  ;; Automatically save and load perspectives on startup and exit
  (defun my/load-perspectives ()
    "Load perspectives from the last saved state."
    (when (file-exists-p persp-state-default-file)
      (persp-state-load persp-state-default-file)))

  (add-hook 'emacs-startup-hook 'my/load-perspectives)
  (add-hook 'kill-emacs-hook (lambda () (persp-state-save persp-state-default-file)))

  (use-package magit
    :commands magit-status
    :config
    (setq magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1))
#+END_SRC
* Org-Mode
#+BEGIN_SRC emacs-lisp
  ;; Install org-mode (comes built-in but ensuring latest version is used)
  (use-package org
    :straight t ;; Ensures that straight.el will install it if not available
    :config
    ;; Org-mode settings (customize as needed)
    (setq org-startup-indented t) ;; Enable indentation by default
    (setq org-hide-leading-stars t)
    (setq org-confirm-babel-evaluate nil)
    (setq org-startup-indented  t)
    (setq org-startup-numerated t)
    ;; Customize specific keybindings in org-mode if desired
    (with-eval-after-load 'evil-org
      (evil-define-key 'normal evil-org-mode-map
        (kbd "TAB") 'org-cycle ;; Make TAB cycle through content in normal mode
        (kbd "M-h") 'org-metaleft ;; Example: promote heading
        (kbd "M-l") 'org-metaright ;; Example: demote heading
        (kbd "M-j") 'org-metadown ;; Move item down
        (kbd "M-k") 'org-metaup))) ;; Move item up

#+END_SRC
* Themes and Colors
#+BEGIN_SRC emacs-lisp
  (use-package modus-themes
    :straight t
    :config
    ;; Set the default theme if you prefer a Modus theme
    (load-theme 'modus-operandi t) ;; Light theme
    ;; (load-theme 'modus-vivendi t)   ;; Dark theme
    )
  (use-package telephone-line
    :init
    (setq telephone-line-primary-left-separator 'telephone-line-cubed-left
          telephone-line-secondary-left-separator 'telephone-line-cubed-hollow-left
          telephone-line-primary-right-separator 'telephone-line-cubed-right
          telephone-line-secondary-right-separator 'telephone-line-cubed-hollow-right)
    (setq telephone-line-height 24
          telephone-line-evil-use-short-tag t)
    (telephone-line-mode t))

#+END_SRC
