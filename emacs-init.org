#+Title: Emac's Setup
#+STARTUP: content inlineimages
#+PROPERTY: header-args:emacs-lisp :results output silent :tangle ~/.emacs

* Basic Setup 
#+BEGIN_SRC emacs-lisp
  ;; Initialize straight.el package manager
  (setq straight-use-package-by-default t)
  ;; Bootstrap straight.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
    	(url-retrieve-synchronously
    	 "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
    	 'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ;; Install use-package via straight.el
  (straight-use-package 'use-package)

  ;; Optional: Basic UI tweaks
  (menu-bar-mode -1)       ;; Disable menu bar
  (tool-bar-mode -1)       ;; Disable toolbar
  (scroll-bar-mode -1)     ;; Disable scrollbar
  (global-auto-revert-mode 1)
  (horizontal-scroll-bar-mode -1)
  (setq inhibit-startup-screen t) ;; Disable startup screen

  ;; Optional: Basic editor settings
  (setq make-backup-files nil) ;; Disable backup files
  (setq auto-save-default nil) ;; Disable auto-save
  (setq ring-bell-function 'ignore) ;; Silence bell
  (setq enable-recursive-minibuffers t)
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; Add more packages here using (use-package ...)
  (use-package disable-mouse
    :straight t
    :config
    (global-disable-mouse-mode)) ;; Disable mouse globally

#+END_SRC
* Evil Mode
#+BEGIN_SRC emacs-lisp
  ;; Install and configure evil-mode
  (use-package evil
    :init
    (setq evil-want-integration t) ;; This is optional since it's enabled by default
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t) ;; Enables Vim-like scrolling with Ctrl+u and Ctrl+d
    (setq evil-want-C-i-jump nil) ;; Avoids conflicts with TAB behavior in Emacs
    :config
    (evil-define-key 'normal 'global
      (kbd "C-c p s") 'persp-switch    ;; Switch to another perspective (workspace)
      (kbd "C-c p k") 'persp-kill      ;; Kill a perspective
      (kbd "C-c p n") 'persp-next      ;; Move to the next perspective
      (kbd "C-c p p") 'persp-prev)     ;; Move to the previous perspective
    (evil-mode 1))

  ;; Optionally, you might want to add evil-collection for better integration with Emacs' built-in packages
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  ;; Install evil-org for Vim keybindings in org-mode
  (use-package evil-org
    :after (org evil)
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (evil-org-set-key-theme '(navigation insert textobjects additional calendar))
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))

  ;; Optional: Use evil-collection to enhance evil bindings across Emacs packages
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  ;; Enable evil-mode in all buffers by default
  (setq evil-default-state 'normal)

  (use-package which-key
    :ensure t
    :config
    (which-key-mode))

  (use-package helpful
    :ensure t
    :bind
    (("C-h f" . helpful-callable)
     ("C-h v" . helpful-variable)
     ("C-h k" . helpful-key)
     ("C-h x" . helpful-command)
     ("C-c C-d" . helpful-at-point)))

#+END_SRC
* Buffer Management
#+BEGIN_SRC emacs-lisp
  ;; Install and configure Consult for enhanced buffer switching
  (use-package consult
    :bind
    (("C-x b" . my/consult-perspective-buffer) ;; Replaces the default buffer list
     ("C-x C-b" . consult-bookmark) ;; Also remap C-x C-b
     ("M-y" . consult-yank-pop)     ;; Enhanced yank (paste) menu
     ("C-s" . consult-line)         ;; Search within current buffer
     ("C-M-l" . consult-imenu)      ;; Jump to headings or sections
     ("M-g M-g" . consult-goto-line)) ;; Go to line with preview
    :config
    (defun my/consult-perspective-buffer ()
      "Use `consult-buffer` to list buffers in the current Perspective."
      (interactive)
      (let ((persp-buffers (persp-current-buffers)))
        (consult--buffer-action (consult--read
                                 (mapcar #'buffer-name persp-buffers)
                                 :prompt "Switch to perspective buffer: "
                                 :sort nil
                                 :require-match t
                                 :category 'buffer))))

    ;; Customize consult-buffer to put the previous buffer first
    (setq consult-buffer-sources
      	'(consult--source-hidden-buffer  ;; Hidden buffers (optional)
      	  consult--source-buffer         ;; Buffers
      	  consult--source-recent-file    ;; Recent files
      	  consult--source-bookmark)))    ;; Bookmarks


  ;; Enable consult for buffer switching with Vertico
  (use-package vertico
    :bind (:map vertico-map
      	      ;; Bind C-j and C-k to move up and down in Vertico's minibuffer
                ("C-j" . vertico-next)
                ("C-k" . vertico-previous)
      	      :map minibuffer-local-map
      	      ("M-h" . backward-kill-word))
    :custom (vertico-cycle t)
    :init (vertico-mode))

  ;; Install and configure Marginalia for annotated completions
  (use-package marginalia
    :straight t
    :after vertico
    :init
    (marginalia-mode))

  ;; Optional: Customize Marginalia annotations if desired
  (setq marginalia-annotators
        '(marginalia-annotators-heavy marginalia-annotators-light nil))

  ;; Install and configure Orderless for flexible completion
  (use-package orderless
    :init
    ;; Set Orderless as the default completion style
    (setq completion-styles '(orderless)
      	completion-category-defaults nil
      	completion-category-overrides '((file (styles partial-completion))))) ;; Partial completion for file paths

  ;; Install and configure Embark for context-aware actions
  (use-package embark
    :bind
    (("C-." . embark-act)         ;; Press C-. to trigger actions on the selected item
     ("C-;" . embark-dwim)        ;; C-; for "Do What I Mean" smart context menu
     ("C-h B" . embark-bindings)) ;; Show all keybindings available for the current context
    :init
    ;; Set embark-act as the prefix-help-command to show Embark's help when pressing the prefix
    (setq prefix-help-command #'embark-prefix-help-command))

  ;; Integrate Embark with Consult for a smoother experience
  (use-package embark-consult
    :after (embark consult)
    :hook
    (embark-collect-mode . consult-preview-at-point-mode)) ;; Show previews for consult commands in embark collect

  (use-package ace-window
    :bind ("C-c o" . 'ace-window)
    :init
    (setq aw-dispatch-always t)
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))

  (use-package avy
    :bind
    ("M-g g" . avy-goto-line)       ;; Quickly jump to a line within the current window
    ("M-g w" . avy-goto-word-1)     ;; Quickly jump to a word within the current window
    ("M-g c" . avy-goto-char)       ;; Jump to a specific character in view
    ("M-o" . avy-goto-char-timer))  ;; Bind to M-o for quick character jumping

  (use-package savehist
    :init
    (savehist-mode))

  (use-package consult-dir
    :bind (("C-x C-d" . consult-dir)))
#+END_SRC
* Project Management
#+BEGIN_SRC emacs-lisp
  ;; Install and configure perspective.el with persistence
  (use-package perspective
    :custom
    (persp-mode-prefix-key (kbd "C-c p")) ;; Change prefix if needed
    (persp-state-default-file "~/.emacs.d/persp-state") ;; File to save workspace state
    ;; Enable saving and restoring of perspectives
    (setq persp-state-default-file (expand-file-name "perspectives" user-emacs-directory))
    (persp-state-save) ;; Automatically save on exit
    (persp-state-load) ;; Automatically load on startup
    (persp-mode-save-state-on-exit t) ;; Auto-save when exiting Emacs
    :config
    (persp-mode))

  ;; Install Projectile
  (use-package projectile
    :straight t
    :config
    (projectile-mode +1)
    ;; Set the main project directory or directories
    (setq projectile-project-search-path '("~/projects"))  ;; Customize to your project path
    ;; Use Vertico (or default completion) for Projectile
    (setq projectile-completion-system 'default)
    :bind-keymap
    ("C-c p" . projectile-command-map)) ;; Prefix for Projectile commands

  ;; Automatically create or switch to a perspective when switching projects
  (defun my-projectile-perspective-switch (project)
    "Switch to a perspective based on PROJECT name."
    (let ((project-name (file-name-nondirectory (directory-file-name project))))
      (persp-switch project-name)
      (projectile-switch-project-by-name project)))

  ;; Automatically save and load perspectives on startup and exit
  (defun my/load-perspectives ()
    "Load perspectives from the last saved state."
    (when (file-exists-p persp-state-default-file)
      (persp-state-load persp-state-default-file)))

  (add-hook 'emacs-startup-hook 'my/load-perspectives)
  (add-hook 'kill-emacs-hook (lambda () (persp-state-save persp-state-default-file)))

  (use-package magit
    :commands magit-status
    :config
    (setq magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1))

#+END_SRC
* Org-Mode
#+BEGIN_SRC emacs-lisp
  ;; Install org-mode (comes built-in but ensuring latest version is used)
  (use-package org
    :config
    (setq org-startup-indented t) ;; Enable indentation by default
    (setq org-hide-leading-stars t)
    (setq org-confirm-babel-evaluate nil)
    (setq org-startup-indented  t)
    (setq org-startup-numerated t)
    (setq org-ellipsis "...")
    (setq org-directory "~/org/"  ;; Directory for Org files
        	org-default-notes-file (concat org-directory "notes.org")
        	org-hide-leading-stars t)
    :bind
    ("C-c c" . org-capture))            ;; Hide leading stars in headings

  ;; Customize specific keybindings in org-mode if desired
  (with-eval-after-load 'evil-org
    (evil-define-key 'normal evil-org-mode-map
      (kbd "TAB") 'org-cycle     ;; Make TAB cycle through content in normal mode
      (kbd "M-h") 'org-metaleft  ;; Example: promote heading
      (kbd "M-l") 'org-metaright ;; Example: demote heading
      (kbd "M-j") 'org-metadown  ;; Move item down
      (kbd "M-k") 'org-metaup))  ;; Move item up

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)))
#+END_SRC
** Org-Roam
#+BEGIN_SRC emacs-lisp
  (use-package org-roam
    :straight t
    :init
    ;; Set org-roam directory
    (setq org-roam-directory (file-truename "~/org/roam"))
    (setq org-roam-v2-ack t)
    ;; Define org-roam capture templates
    (setq org-roam-capture-templates
          '(("l" "Literature Notes" plain
             "%?"
             :if-new (file+head "l-${slug}.org" "#+title: ${title}\n")
             :unnarrowed t)
            ("z" "Zettels" plain
             "%?"
             :if-new (file+head "z-${slug}.org" "#+title: ${title}\n")
             :unnarrowed t)
            ("p" "Project Notes" plain
             "%?"
             :if-new (file+head "p-${slug}.org" "#+title: ${title}\n")
             :unnarrowed t)))
    :config
    ;; Enable org-roam's autosync mode
    (org-roam-db-autosync-mode)
    :config
    (cl-defmethod org-roam-node-type ((node org-roam-node))
      "Return the TYPE of NODE."
      (condition-case nil
  	(file-name-nondirectory
  	 (directory-file-name
            (file-name-directory
             (file-relative-name (org-roam-node-file node) org-roam-directory))))
        (error "")))
    (setq org-roam-node-display-template
  	(concat "${type:15} ${title:*} ${tags:10}"))
    (org-roam-db-autosync-mode)
    :bind
    ;; Bind keys to commonly used org-roam commands
    (("C-c r f" . org-roam-node-find)        ;; Find or create a node
     ("C-c r i" . org-roam-node-insert)      ;; Insert a link to a node
     ("C-c r c" . org-roam-capture)          ;; Capture a new note
     ("C-c r b" . org-roam-buffer-toggle)    ;; Toggle backlinks buffer
     ("C-c r g" . org-roam-graph)            ;; Generate a graph of notes
     ("C-c r d" . org-roam-dailies-capture-today))) ;; Open today's daily note
  
  
(with-eval-after-load 'org-roam
  (cl-defmethod org-roam-node-type ((node org-roam-node))
    "Return the type of the NODE based on the first letter of the file name."
    (let* ((filename (file-name-nondirectory (org-roam-node-file node)))
           (first-letter (substring filename 0 1)))
      (cond ((string-equal first-letter "z") "zettel")
            ((string-equal first-letter "p") "project")
            ((string-equal first-letter "l") "literature")
            (t "unknown")))) ; default type if it doesn't match any of the cases
  (setq org-roam-node-display-template
        (concat "${type:15} ${title:75} " (propertize "${tags:75}" 'face 'org-tag))))


  ;; Org-roam-ui configuration
  (use-package org-roam-ui
    :after org-roam
    :config
    ;; Synchronize theme with Emacs
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t))

#+END_SRC
** Org-Capture
** Org-Babel
#+BEGIN_SRC emacs-lisp
  ;; Org Babel for code blocks
  (use-package ob
    :straight nil
    :after (:all org)
    :init
    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("el"  . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("hs"  . "src haskell"))
    (add-to-list 'org-structure-template-alist '("sh"  . "src shell"))
    (add-to-list 'org-structure-template-alist '("py"  . "src python"))
    (add-to-list 'org-structure-template-alist '("uml" . "src plantuml"))
    (setq org-confirm-babel-evaluate nil)
    :config

    ;; load more languages for org-babel
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((shell      . t)
       (emacs-lisp . t)
       (plantuml   . t)
       (dot        . t)
       (python     . t)
       (haskell    . t)
       (scheme     . t)
       )))
#+END_SRC 
** TODO Org-Readwise
#+begin_src emacs-lisp :tangle no
;; Install org-readwise from GitHub
(use-package org-readwise
  :straight (org-readwise :type git :host github :repo "CountGreven/org-readwise")
  :config
  ;; Ensure auth-source is configured to find your Readwise token
  (setq auth-sources '("~/.authinfo"))
  ;; Set the output location for your highlights (buffer or file)
  (setq org-readwise-output-location "~/org/readwise-highlights.org")
  ;; Optionally set the debug level (0 = no debug, 1 = basic debug, 2 = detailed debug)
  (setq org-readwise-debug-level 2))
#+end_src

#+begin_src emacs-lisp
(require 'json)

(defun fetch-readwise-highlights-json ()
  "Fetch Readwise highlights and save the raw JSON data to a file."
  (interactive)
  (let* ((url-request-method "GET")
         (url-request-extra-headers
          `(("Authorization" . ,(concat "Token " (auth-source-pick-first-password :host "readwise.io")))))
         (url "https://readwise.io/api/v2/highlights/")
         (response-buffer (url-retrieve-synchronously url)))
    (with-current-buffer response-buffer
      (goto-char url-http-end-of-headers)
      (let ((json-data (buffer-substring-no-properties (point) (point-max))))
        ;; Save JSON to a file
        (with-temp-file "~/readwise-highlights.json"
          (insert json-data))
        (message "Raw JSON data saved to ~/readwise-highlights.json")))))


(require 'json)

(defun parse-readwise-highlights-by-title ()
  "Parse Readwise JSON data and create an Org file with a grouped structure by date and title."
  (interactive)
  (let ((json-file "~/readwise-highlights.json")
        (org-file "~/readwise-highlights.org"))
    (with-temp-buffer
      ;; Read and parse JSON data
      (insert-file-contents json-file)
      (let* ((json-object-type 'alist)
             (json-array-type 'list)
             (json-key-type 'symbol)
             (data (json-read-from-string (buffer-string)))
             ;; Get the last sync date in Org dailies format
             (last-sync-date (format-time-string "[[%Y-%m-%d]]" (current-time))))
        ;; Create Org structure
        (with-temp-file org-file
          ;; Top-level heading with sync date
          (insert (format "* Highlights %s\n\n" last-sync-date))
          ;; Organize highlights by title
          (let ((titles (make-hash-table :test 'equal)))
            ;; Collect highlights under each title
            (dolist (highlight (alist-get 'results data))
              (let ((title (or (alist-get 'title highlight) "Untitled"))
                    (author (or (alist-get 'author highlight) "Unknown Author"))
                    (text (alist-get 'text highlight))
                    (note (alist-get 'note highlight)))
                (puthash title
                         (cons (list :author author :text text :note note)
                               (gethash title titles))
                         titles)))
            ;; Insert each title with associated notes and highlights in Org format
            (maphash (lambda (title highlights)
                       (let ((author (plist-get (car highlights) :author)))
                         ;; Insert title heading
                         (insert (format "** %s - %s\n" author title))
                         ;; Insert each note and associated highlight under the title
                         (dolist (highlight highlights)
                           (let ((note (plist-get highlight :note))
                                 (text (plist-get highlight :text)))
                             ;; Insert note if it exists
                             (when note
                               (insert (format "   - %s\n" note)))
                             ;; Insert the main highlight text
                             (insert (format "     - %s\n" text))))
                         (insert "\n")))
                     titles))))
        (message "Highlights exported to %s" org-file))))
 
#+end_src
** TODO Org-Read-ot-Later
* Useful Packages
#+BEGIN_SRC emacs-lisp
  (use-package ialign
    :ensure t)
  (use-package evil-nerd-commenter
    :bind ("M-;" . 'evilnc-comment-or-uncomment-lines))
  (use-package wgrep
    :straight t)

#+END_SRC
* Popper
#+begin_src emacs-lisp
  (use-package popper
    :straight t
    :init
    ;; Define buffers to treat as popups
    (setq popper-reference-buffers
          '("\\*Messages\\*"
            "\\*Embark*"
            "Output\\*$"
            "\\*Async Shell Command\\*"
            help-mode
            compilation-mode
            "^\\*projectile-scratch-buffer\\*"))
    ;; Group popups by Projectile projects
    (setq popper-group-function #'popper-group-by-project)
    :bind (("C-`"   . popper-toggle)
           ("M-`"   . popper-cycle)
           ("C-M-`" . popper-toggle-type))
    :config
    (popper-mode +1)
    (popper-echo-mode +1))

#+end_src
* Themes and Colors
#+BEGIN_SRC emacs-lisp
  (use-package modus-themes)
  (use-package ef-themes)
  (use-package modus-themes)
  (use-package nano-theme
    :straight (:host github :repo "rougier/nano-theme"))
  (use-package telephone-line
    :init
    (setq telephone-line-primary-left-separator 'telephone-line-cubed-left
        	telephone-line-secondary-left-separator 'telephone-line-cubed-hollow-left
        	telephone-line-primary-right-separator 'telephone-line-cubed-right
        	telephone-line-secondary-right-separator 'telephone-line-cubed-hollow-right)
    (setq telephone-line-height 24
        	telephone-line-evil-use-short-tag t)
    (telephone-line-mode t))

  (use-package all-the-icons)
  (use-package nerd-icons-completion
    :config
    (nerd-icons-completion-mode))

  ;;  (set-face-attribute 'default nil :font "JetBrains Mono" :height 100) ;
  (set-face-attribute 'default nil :font "Fira Code-10")

  (use-package all-the-icons-completion
    :straight t
    :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
    :init
    (all-the-icons-completion-mode))

#+END_SRC


* File Navigating, Editing and Querying
* Grabbing articles from Internet
* Git tracking
* Readwise Integration
* Local Nodes
* Copy/Download images and highlights
* Other Evil packages
* Dired
* Bookmarks
* Enable AI within Emacs
Save conversations 
