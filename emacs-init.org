#+Title: Emac's Setup
#+STARTUP: content inlineimages
#+PROPERTY: header-args:emacs-lisp :results output silent :tangle ~/.emacs

* Bench-marking Emacs Boot time
Benchmark Emacs startup time
#+begin_src emacs-lisp
  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  ;; Profile emacs startup
  (add-hook
   'emacs-startup-hook
   (lambda ()
     (message "*** Emacs loaded in %s seconds with %d garbage collections."
              (emacs-init-time "%.2f")
              gcs-done)))
#+end_src


* Package Manager
Using Straight.el for package management.
#+begin_src emacs-lisp 
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name
          "straight/repos/straight.el/bootstrap.el"
          (or (bound-and-true-p straight-base-dir)
              user-emacs-directory)))
        (bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
  (straight-use-package 'use-package)
  (setq straight-vc-git-default-clone-depth 1)
  (setq straight-use-package-by-default t)

#+end_src


* Basic Emacs Settings
#+begin_src emacs-lisp 
  (setq-default inhibit-splash-screen t)
  (add-to-list 'default-frame-alist '(fullscreen . fullboth))
  (setq make-backup-files nil)
  (toggle-scroll-bar -1)
  (tool-bar-mode     -1)
  (menu-bar-mode     -1)
  (global-auto-revert-mode 1)
  (tooltip-mode      -1)
  (setq make-backup-files nil) 
  (setq auto-save-default nil)
  (setq package-enable-at-startup nil)
  (setq vc-follow-symlinks nil)
  (setq jit-lock-stealth-time nil)
  (setq jit-lock-defer-time nil)
  (setq jit-lock-defer-time 0.05)
  (setq jit-lock-stealth-load 200)
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 2)
  (setq custom-file (concat user-emacs-directory "custom.el"))
  (setq switch-to-buffer-obey-display-actions t)
  (customize-set-variable 'scroll-bar-mode nil)
  (customize-set-variable 'horizontal-scroll-bar-mode nil)
  (setq browse-url-browser-function 'browse-url-default-browser)
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; Check if the local-config.el file exists, and load it if it does
  (let ((local-config "~/emacs-local-config.el"))
    (when (file-exists-p local-config)
      (load-file local-config)))

#+end_src


* Mac OS X Specifics
#+begin_src emacs-lisp
  (when (memq window-system '(mac ns x))
    (use-package exec-path-from-shell
      :init (exec-path-from-shell-initialize))
    (setq mac-command-modifier 'control)
    ) ;; (menu-bar-mode 1))
#+end_src


* Interacting with Emacs
** Evil Mode
Evil mode for keybinding and most of efficiency goodness
#+begin_src emacs-lisp 
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-d-scroll t)
    (setq evil-want-C-i-jump nil)
    ;; (setq evil-undo-system 'undo-tree)
    (setq evil-insert-state-cursor '(bar))
    (setq evil-normal-state-cursor '(box))
    ;;(setq evil-motion-state-modes (append evil-emacs-state-modes evil-motion-state-modes))
    ;;(setq evil-emacs-state-modes nil)
    :config
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
    ;;(evil-set-initial-state 'messages-buffer-mode 'normal)
    ;;(evil-set-initial-state 'dashboard-mode 'normal)
    (evil-mode 1))
#+end_src

** Evil Bindings 
#+begin_src emacs-lisp 
  (use-package evil-collection
    ;; :custom (evil-collection-setup-minibuffer t)
    :after evil
    :config
    (evil-collection-init)
    (with-eval-after-load 'org-agenda
      (define-key org-agenda-mode-map "j" 'org-agenda-next-line)
      (define-key org-agenda-mode-map "k" 'org-agenda-previous-line)))

  (use-package evil-org
    :ensure t
    :after org
    :hook (org-mode . (lambda () evil-org-mode))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))

  (use-package evil-nerd-commenter
    :bind ("M-;" . 'evilnc-comment-or-uncomment-lines))

  (use-package evil-surround
    :after evil
    :config
    (global-evil-surround-mode 1))

  (use-package evil-snipe
    :init (evil-snipe-mode 1))

  (use-package evil-matchit
    :after evil
    :init
    (setq evilmi-shortcut "M-m")
    (global-evil-matchit-mode 1))

  (use-package evil-lion
    :after evil
    :config
    (evil-lion-mode))

  (use-package evil-numbers
    :after evil)

  (use-package vimish-fold
    :after evil)

  (use-package evil-vimish-fold
    :after vimish-fold
    :hook ((prog-mode conf-mode text-mode) . evil-vimish-fold-mode))
#+end_src

** Customize Keyboard Shortcuts
#+begin_src emacs-lisp 
  ;; Customize your keyboard shortcuts
  ;; (use-package hydra)
  ;; (defhydra hydra-text-scale (:timeout 4)
  ;;           "scale text"
  ;;           ("j" text-scale-increase "in")
  ;;           ("k" text-scale-decrease "out")
  ;;           ("f" nil "finished" :exit t))

  (global-set-key
   (kbd "C-x o")
   (lambda () (interactive)
     (switch-to-buffer
      (other-buffer (current-buffer) 1))))

  (use-package general
    :config
    (general-create-definer rune/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")
    (rune/leader-keys
      "t"  '(:ignore t                                                        :which-key "Toggles")
      "gc" '(copilot-mode                                                     :which-key "Copilot Mode")
      "gp" '(gptel                                                            :which-key "Gptel")
      "gP" '(gptel-send                                                       :which-key "Gptel-Send")
      "xv" '(my-project-vterm                                                 :which-key "Vterm") 
      "gt" '(lambda() (interactive)(find-file "~/org/gtd.org")                :which-key "gtd.org")
      "ok" '(lambda() (interactive)(find-file "~/org/okr.org")                :which-key "okr.org")
      "fe" '(lambda() (interactive)(find-file "~/linux-setup/emacs-init.org") :which-key "emacs-init.org")
      "fz" '(lambda() (interactive)(find-file "~/linux-setup/zsh-init.org")   :which-key "zsh-init.org")
      "yn" '(yas-new-snippet                                                  :which-key "New Yasnippet")
      "yr" '(yas-reload-all                                                   :which-key "Yasnippet Reload")
      "yt" '(yas-describe-tables                                              :which-key "Yasnippet Describe")
      "yv" '(lambda() (interactive) yas-snippet-visit-file                    :which-key "Visit Yasnippet File")
      ;; Org Mode Bindings
      "oc" '(org-capture                        :which-key "Org Todo")
      "ot" '(my/org-capture-todo                :which-key "Org Todo")
      "oa" '(org-agenda                         :which-key "Org Agenda")
      ;; "or" '(citar-create-note                  :which-key "Org Roam Reference Note")
      ;; "op" '(my/org-roam-capture-project-note   :which-key "Org Roam Project Note")
      ;; "om" '(my/org-roam-capture-permanent-note :which-key "Org Roam Permanent Note")
      "of" '(org-roam-node-find                    :which-key "Org Roam Node Find")
      "oi" '(org-roam-node-insert                  :which-key "Org Roam Node Insert")
      ))

  (defun my/org-roam-capture-project-note ()
    "Capture a new Org Roam project note using the designated project template."
    (interactive)
    (org-roam-capture :keys "p"))

  (defun my/org-roam-capture-permanent-note ()
    "Capture a new Org Roam project note using the designated project template."
    (interactive)
    (org-roam-capture :keys "m"))

  (defun my/org-capture-todo ()
    "Capture a new Org Roam project note using the designated project template."
    (interactive)
    (org-capture :keys "t"))

  (defun beginning-of-file-and-line ()
    (interactive)
    (goto-char (point-min))
    (beginning-of-line))

  (defun end-of-file-and-line ()
    (interactive)
    (goto-char (point-max))
    (end-of-line))

  (define-key evil-normal-state-map (kbd "gg") 'beginning-of-file-and-line)
  (define-key evil-normal-state-map (kbd "G") 'end-of-file-and-line)
#+end_src


* Useful packages
For using getting around and understanding Emacs
** Helper Packages
For extending Emacs functionality
#+begin_src emacs-lisp 
  ;;notified if the definition of a function you are customizing change
  (use-package el-patch)

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init (savehist-mode))

  ;; a better window manager?
  (use-package ace-window
    :bind ("C-c o" . 'ace-window)
    :init
    (setq aw-dispatch-always t)
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))

  ;; what key should you push next? not needed embark
  (use-package which-key
    :init (which-key-mode))
  (use-package restart-emacs)

  (use-package default-text-scale)

  ;; (use-package project
  ;;   :straight nil)
  (use-package popper
    :bind (("C-`"   . popper-toggle)
           ("M-`"   . popper-cycle)
           ("C-M-`" . popper-toggle-type))
    :init
    ;; have popper respect display-buffer-alist rules
    ;; (setq popper-display-control nil)
    ;; enable actions in echo area (k to kill buffer)
    ;; (setq popper-echo-dispatch-actions t)
    ;; how to group popups
    ;; (setq popper-display-function #'popper-select-popup-at-bottom)
    ;; (setq popper-group-function #'popper-group-by-project)
    ;; which buffers should be considered popups
    (setq popper-window-height 0.33)
    (setq popper-reference-buffers
          '("\\*ChatGPT\\*"
            "\\*scratch\\*"
            "\\*?vterm"
            help-mode
            compilation-mode))
    (popper-mode +1)
    (popper-echo-mode +1))                ; For echo area hints
  (use-package no-littering
    :config
    ;; No additional config needed for no-littering,
    ;; but you can customize the save file locations if desired.
    )
#+end_src
** Make the Minibuffer easier to follow
#+begin_src emacs-lisp 
  ;; Completion frameworks and doing stuff
  (use-package vertico
    :bind (:map
           vertico-map
           ("C-j" . vertico-next)
           ("C-k" . vertico-previous)
           :map minibuffer-local-map
           ("M-h" . backward-kill-word))
    :custom (vertico-cycle t)
    :init (vertico-mode))

  (use-package vertico-posframe
    :after vertico
    :custom
    (vertico-posframe-parameters '((left-fringe . 8)
                                   (right-fringe . 8)))
    :config
    (add-hook 'vertico-mode-hook #'vertico-posframe-mode)
    (vertico-multiform-mode 1)
    
    ;; Configuring multiform for specific commands
    (setq vertico-multiform-commands
          '((consult-line
             posframe
             (vertico-posframe-poshandler . posframe-poshandler-frame-top-center)
             (vertico-posframe-border-width . 10)
             (vertico-posframe-fallback-mode . vertico-buffer-mode))
            (t posframe)))
    )

  (use-package marginalia
    :bind (:map minibuffer-local-map
                ("M-A" . marginalia-cycle))
    :init
    (marginalia-mode))

#+end_src
** Consult
#+begin_src emacs-lisp 
  ;; Example configuration for Consult
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings in `mode-specific-map'
           ("C-c M-x"           . consult-mode-command)
           ("C-c h"             . consult-history)
           ("C-c k"             . consult-kmacro)
           ("C-c m"             . consult-man)
           ("C-c i"             . consult-info)
           ([remap Info-search] . consult-info)
           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:"           . consult-complex-command)     ;; orig    . repeat-complex-command
           ("C-x b"             . consult-buffer)              ;; orig  . switch-to-buffer
           ("C-x 4 b"           . consult-buffer-other-window) ;; orig    . switch-to-buffer-other-window
           ("C-x 5 b"           . consult-buffer-other-frame)  ;; orig    . switch-to-buffer-other-frame
           ("C-x t b"           . consult-buffer-other-tab)    ;; orig    . switch-to-buffer-other-tab
           ("C-x r b"           . consult-bookmark)            ;; orig    . bookmark-jump
           ("C-x p b"           . consult-project-buffer)      ;; orig    . project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#"               . consult-register-load)
           ("M-'"               . consult-register-store)      ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#"             . consult-register)
           ;; Other custom bindings
           ("M-y"               . consult-yank-pop)            ;; orig. yank-pop
           ;; M-g bindings in `goto-map'
           ("M-g e"             . consult-compile-error)
           ("M-g f"             . consult-flymake)             ;; Alternative: consult-flycheck
           ("M-g g"             . consult-goto-line)           ;; orig  . goto-line
           ("M-g M-g"           . consult-goto-line)           ;; orig    . goto-line
           ("M-g o"             . consult-outline)             ;; Alternative: consult-org-heading
           ("M-g m"             . consult-mark)
           ("M-g k"             . consult-global-mark)
           ("M-g i"             . consult-imenu)
           ("M-g I"             . consult-imenu-multi)
           ;; M-s bindings in `search-map'
           ("M-s d"             . consult-find)                ;; Alternative: consult-fd
           ("M-s c"             . consult-locate)
           ("M-s g"             . consult-grep)
           ("M-s G"             . consult-git-grep)
           ("M-s r"             . consult-ripgrep)
           ("M-s l"             . consult-line)
           ("M-s L"             . consult-line-multi)
           ("M-s k"             . consult-keep-lines)
           ("M-s u"             . consult-focus-lines)
           ;; Isearch integration
           ("M-s e"             . consult-isearch-history)
           :map isearch-mode-map
           ("M-e"               . consult-isearch-history)     ;; orig. isearch-edit-string
           ("M-s e"             . consult-isearch-history)     ;; orig  . isearch-edit-string
           ("M-s l"             . consult-line)                ;; needed by consult-line to detect isearch
           ("M-s L"             . consult-line-multi)          ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s"               . consult-history)             ;; orig. next-matching-history-element
           ("M-r"               . consult-history))            ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; By default `consult-project-function' uses `project-root' from project.el.
    ;; Optionally configure a different project root function.
    ;;;; 1. project.el (the default)
    ;; (setq consult-project-function #'consult--default-project--function)
    ;;;; 2. vc.el (vc-root-dir)
    ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
    ;;;; 3. locate-dominating-file
    ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
    ;;;; 4. projectile.el (projectile-project-root)
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
    ;;;; 5. No project support
    ;; (setq consult-project-function nil)
    )
#+end_src

** Orderless
#+begin_src emacs-lisp 
  ;; Optionally use the `orderless' completion style.
  (use-package orderless
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic)
          orderless-regexp t
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))

  ;;Do commands and operatioms on buffers or synbols
  (use-package embark
    :bind (("C-c e" . embark-act)
           ("M-." . embark-dwim)
           ("C-h B" . embark-bindings))
    :init (setq prefix-help-command #'embark-prefix-help-command))

  (use-package embark-consult
    :after (embark consult)
    :hook (embark-collect-mode . consult-preview-at-point-mode))
#+end_src
** You Snip It
#+BEGIN_SRC emacs-lisp 
  (use-package yasnippet
    :config
    ;; Add your custom snippet directory to the list of snippet directories.
    ;; Replace "~/my-snippets" with the path to your custom snippet directory.
    (add-to-list 'yas-snippet-dirs "~/linux-setup/yasnippet")
    
    ;; Load the snippets from the directories.
    (yas-reload-all)

    ;; Enable YASnippet globally.
    (yas-global-mode 1))

#+END_SRC

** Browse Files
#+begin_src emacs-lisp 
  (use-package dired
    :straight nil)

  (use-package dired-sidebar
    :bind (("C-x C-n" . dired-sidebar-toggle-sidebar))
    :ensure t
    :commands (dired-sidebar-toggle-sidebar)
    :init
    (add-hook 'dired-sidebar-mode-hook
              (lambda ()
                (unless (file-remote-p default-directory)
                  (auto-revert-mode))))
    :config
    (push 'toggle-window-split dired-sidebar-toggle-hidden-commands)
    (push 'rotate-windows dired-sidebar-toggle-hidden-commands)

    (setq dired-sidebar-subtree-line-prefix "__")
    (setq dired-sidebar-theme 'vscode)
    (setq dired-sidebar-use-term-integration t)
    (setq dired-sidebar-use-custom-font t))
  (use-package all-the-icons-dired
    :after dired-sidebar
    :hook (dired-mode . all-the-icons-dired-mode))

#+end_src

#+begin_src emacs-lisp :tangle no 
#+end_src
** Lorem Ipsum
#+BEGIN_SRC emacs-lisp 
  (use-package lorem-ipsum
    :ensure t
    :config
    (lorem-ipsum-use-default-bindings))
#+END_SRC



* Org Mode Setup
Org and Org-roam will help you network your thoughts and reflect your understanding. Read "How to take smart notes"
** Org-Mode
#+begin_src emacs-lisp 
  (use-package org 
    :config
    (setq org-todo-keywords
          '((sequence "TODO(t)" "WAITING(w)" "DONE(d)")
            (sequence "SCOPE(s)" "|"  "CANCELED(c)")))
    (setq org-use-fast-todo-selection t)
    (setq org-file-apps 
          '((auto-mode . emacs)
            ("\\.pdf\\'" . system)))
    (setq org-capture-templates
          '(
            ("t" "Todo" entry (file+headline "~/org/gtd.org" "Capture Tasks")
             "* TODO %?\n"))
          )
    (setq org-directory "~/org")
    (setq org-agenda-custom-commands
          '(
            ("d" "Drafts" tags "DRAFT={TRUE}"
             ((org-agenda-overriding-header "Draft Notes")
              (org-agenda-prefix-format '((tags . "%-1t %b")))))
            ("s" "Seeds" tags "SEED={TRUE}"
             ((org-agenda-overriding-header "Seed Notes")
              (org-agenda-prefix-format '((tags . "%-1t %b")))))
            ))
    (setq org-agenda-files (directory-files-recursively "~/org" "\\.org$"))
    (setq org-confirm-babel-evaluate nil)
    (setq org-startup-indented  t)
    (setq org-startup-numerated t)
    (setq org-startup-with-inline-images t)
    (setq org-blank-before-new-entry nil)
    (setq org-hide-emphasis-markers nil)
    (setq org-ellipsis " ▼")
    :hook
    (org-mode . visual-line-mode)
    (org-babel-after-execute . org-redisplay-inline-images))

  (defun update-org-agenda-files-recursively ()
    "Update `org-agenda-files` to include all .org files under ~/org directory, excluding ~/org/roam/templates."
    (interactive)
    (setq org-agenda-files
          (seq-filter
           (lambda (file)
             (not (string-match-p (regexp-quote "~/org/roam/templates/") file)))
           (directory-files-recursively "~/org" "\\.org$"))))

  (advice-add 'org-agenda :before #'update-org-agenda-files-recursively)

  ;; Configure Org mode to open PDFs with the system default PDF viewer
  (with-eval-after-load 'org
    (add-to-list 'org-file-apps 
                 '("\\.pdf\\'" . "open %s")) ; For macOS
    ;; For Linux, you might use '("\\.pdf\\'" . "xdg-open %s")
    ;; For Windows, you might use '("\\.pdf\\'" . "start %s")
    )

  ;; (use-package org-tidy
  ;;   :hook
  ;;   (org-mode . org-tidy-mode))

  (use-package visual-fill-column
    :custom
    (visual-fill-column-center-text t)
    (visual-fill-column-width 140)
    :hook (org-mode . visual-fill-column-mode))

  (use-package jinx
    :hook (emacs-startup . global-jinx-mode)
    :bind (("M-$" . jinx-correct)
           ("C-M-$" . jinx-languages)))
#+end_src

** Org Tangle
#+begin_src emacs-lisp 
  ;; Automatically tangle our Emacs.org config file when we save it
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/linux-setup/emacs-init.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (message "Tangling new .emacs")
        (org-babel-tangle)))
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/linux-setup/zsh-init.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (message "Tangling new .zsh")
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
#+end_src

** Org-Roam
#+BEGIN_SRC emacs-lisp 
  (use-package org-roam
    :custom
    (org-roam-directory "~/org/roam")
    (org-roam-completion-everywhere t)
    (org-roam-capture-templates
     '(
       ("d" "default" plain
        "\n<projnote%?"
        :if-new (file+head "d-${slug}.org" "#+TITLE: ${title}\n\n")
        :unnarrowed t)
       ("r" "reference" plain
        "\n<refnote%?\n* References\n[cite:@${citar-citekey}]"
        :if-new (file+head "r-${slug}.org" "#+TITLE: ${title}\n\n")
        :unnarrowed t)
       ("p" "project" plain
        "\n<projnote%?"
        :if-new (file+head "p-${slug}.org" "#+TITLE: ${title}\n\n")
        :unnarrowed t)
       ("m" "permanent" plain
        "\n<permnote%?"
        :if-new (file+head "m-${slug}.org" "#+TITLE: ${title}\n\n")
        :unnarrowed t)
       ))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           :map org-mode-map
           ("C-M-i" . completion-at-point))
    :config
    (org-roam-db-autosync-mode))

  ;; (use-package org-ql)

  (use-package org-roam-ui
    :after org-roam
    ;; Assuming you want the UI available on Emacs startup
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))

  (with-eval-after-load 'org-roam
    (cl-defmethod org-roam-node-type ((node org-roam-node))
      "Return the type of the NODE based on the first letter of the file name."
      (let* ((filename (file-name-nondirectory (org-roam-node-file node)))
             (first-letter (substring filename 0 1)))
        (cond ((string-equal first-letter "m") "main")
              ((string-equal first-letter "p") "project")
              ((string-equal first-letter "r") "reference")
              (t "unknown")))) ; default type if it doesn't match any of the cases
    (setq org-roam-node-display-template
          (concat "${type:15} ${title:*} " (propertize "${tags:10}" 'face 'org-tag))))
#+end_src

** Org-Mode Literate Programming
#+BEGIN_SRC emacs-lisp 
  (setq org-plantuml-jar-path "~/plantuml.jar")

  (use-package plantuml-mode
    :ensure t
    :mode ("\\.puml\\'" . plantuml-mode)
    :config
    (setq plantuml-jar-path "~/plantuml.jar")
    (setq plantuml-default-exec-mode 'jar))
  ;; Automatically refresh inline images after execution
  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
  ;; Org Babel for code blocks
  (use-package ob
    :straight nil
    :after (:all org)
    :init
    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("el"  . "src emacs-lisp :tangle no"))
    (add-to-list 'org-structure-template-alist '("hs"  . "src haskell"))
    (add-to-list 'org-structure-template-alist '("sh"  . "src shell"))
    (add-to-list 'org-structure-template-alist '("py"  . "src python"))
    (add-to-list 'org-structure-template-alist '("uml" . "src plantuml"))
    (setq org-confirm-babel-evaluate nil)
    :config

    ;; load more languages for org-babel
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((shell      . t)
       (emacs-lisp . t)
       (plantuml   . t)
       (dot        . t)
       (python     . t)
       (haskell    . t)
       (scheme     . t)
       )))
#+end_src
** Citar and Zotero
#+begin_src emacs-lisp 
  (use-package citar
    :custom
    (citar-indicators
     (list citar-indicator-files ; plain text
           citar-indicator-notes-icons)) ; icon
    (org-cite-global-bibliography (list "~/bibliography.bib"))
    (org-cite-insert-processor   'citar)
    (org-cite-follow-processor   'citar)
    (org-cite-activate-processor 'citar)
    (citar-bibliography org-cite-global-bibliography)
    :bind
    (:map org-mode-map :package org ("C-c b" . #'org-cite-insert))
    :hook
    (LaTeX-mode    . citar-capf-setup)
    (org-mode      . citar-capf-setup)
    (org-roam-mode . citar-capf-setup)
    )

  (use-package citar-org-roam
    ;; :after (org citar org-roam)
    :config
    (setq citar-org-roam-note-title-template "${author} - ${title}")
    (setq citar-org-roam-subdir ".")
    (setq citar-org-roam-capture-template-key "r")
    (citar-org-roam-mode))

  (use-package citar-embark
    :after citar embark
    :config (citar-embark-mode)) 

  (defun citar-open-entry-in-zotero (key)
    "Open the Zotero entry corresponding to the citation KEY."
    (interactive "sCitation Key: ")
    (let ((zotero-uri (format "zotero://select/items/@%s" key)))
      (browse-url zotero-uri)))

  (defun my/org-cite-open-at-point-or-zotero ()
    "Open citation at point in Zotero if on a citation, otherwise use `org-open-at-point`."
    (interactive)
    (if-let* ((element (org-element-context))
              (type (org-element-type element))
              (key (when (eq type 'citation-reference) (org-element-property :key element))))
        (citar-open-entry-in-zotero key)
      (org-open-at-point)))

  (define-key org-mode-map (kbd "C-c z") #'my/org-cite-open-at-point-or-zotero)

  (defun my/citar-open-entry-in-zotero-ui ()
    "Open the Zotero entry corresponding to the selected citation key."
    (interactive)
    ;; Ensure selection returns a list, accommodating both single and multiple selections.
    (let* ((selection (citar-select-refs))
           (keys (if (listp selection) selection (list selection)))) ; Wrap in list if not already
      (when keys
        (let ((key (car keys))) ; Assuming the first selected key for simplicity
          (when key
            (let ((zotero-uri (format "zotero://select/items/@%s" key)))
              (browse-url zotero-uri)))))))

  (define-key org-mode-map (kbd "C-c C-z") #'my/citar-open-entry-in-zotero-ui)

#+end_src
*** Convert Zotero Markdown to Org
#+BEGIN_SRC emacs-lisp 
  (defun pandoc-convert-file (input-file output-file)
    "Convert INPUT-FILE to OUTPUT-FILE using Pandoc."
    (shell-command (format "pandoc %s -o %s --wrap=none"
                           (shell-quote-argument input-file)
                           (shell-quote-argument output-file))))

  (defun generate-org-filename (markdown-file)
    "Generate an Org mode filename from MARKDOWN-FILE."
    (concat (file-name-sans-extension markdown-file) ".org"))

  (defun pandoc-md-to-org (markdown-file)
    "Convert MARKDOWN-FILE to an Org file using Pandoc."
    (let ((org-file (generate-org-filename markdown-file)))
      (pandoc-convert-file markdown-file org-file)
      org-file))

  (defun my-pandoc-convert-to-org ()
    "Convert the current Markdown file buffer to Org format using Pandoc."
    (interactive)
    (if (not (buffer-file-name))
        (message "Buffer is not visiting a file!")
      (let ((org-file (pandoc-md-to-org (buffer-file-name))))
        (if (file-exists-p org-file)
            (find-file org-file)
          (message "Conversion failed or Org file was not created.")))))

  (defun convert-md-links-to-org ()
    "Convert all Markdown links in the current buffer to Org-mode links."
    (interactive)
    (goto-char (point-min)) ;; Start from the beginning of the buffer.
    (while (re-search-forward "\\[\\(.*?\\)\\](\\(zotero://select/library/items/[^)]+\\))" nil t)
      (let ((link-text (match-string 1))
            (url (match-string 2)))
        ;; Replace the Markdown link with Org-mode format.
        (replace-match (format "[[%s][%s]]" url link-text)))))

#+END_SRC
*** Open Org links in Zotero
#+BEGIN_SRC emacs-lisp
  (defun zotero-open (zotero-link)
    (start-process "zotero_open" nil "open" (concat "zotero:" zotero-link)))

  (org-link-set-parameters "zotero" :follow #'zotero-open)
#+END_SRC
*** Convert Line to Heading
#+BEGIN_SRC emacs-lisp
  (defun convert-line-to-heading (level)
    "Convert the current line to an Org mode heading of specified LEVEL."
    (interactive "nLevel of the heading: ")
    (beginning-of-line) ;; Move to the beginning of the line.
    (insert (make-string level ?*) " ")) ;; Insert asterisks and a space.
#+END_SRC
** TODO Org-Roam Project Tracking in GTD
#+begin_src emacs-lisp :tangle no
  (defun my-org-sanitize-heading (heading-text)
    "Sanitize HEADING-TEXT to be file-system friendly."
    (replace-regexp-in-string "[^[:alnum:]-]" "" (downcase heading-text)))

  (defun my-org-create-and-link-file (heading-text category)
    "Create a file from HEADING-TEXT in the specified CATEGORY and insert a link."
    (let* ((base-dir (cond ((string= category "Project Execution") "~/org/roam/projects/")
                           ((string= category "Reference Review") "~/org/roam/reference/")))
           (sanitized-heading (my-org-sanitize-heading heading-text))
           (file-name (concat base-dir sanitized-heading ".org")))
      (unless (file-exists-p file-name)
        (with-temp-buffer
          (insert (concat "#+title: " heading-text "\n"))
          (make-directory (file-name-directory file-name) t)
          (write-file file-name))
        (message "Created file: %s" file-name))
      ;; Insert link
      (save-excursion
        (org-back-to-heading t)
        (end-of-line)
        (insert (format "\n[[file:%s][Link to detailed note]]\n" file-name)))))

  (defun my-org-move-heading-to-category (category)
    "Move the current heading to the specified CATEGORY section."
    (let ((target-heading (concat "* " category)))
      (org-cut-subtree) ; Cut the current subtree.
      (goto-char (point-min)) ; Start from the beginning of the buffer.
      ;; Search for the target category section.
      (if (re-search-forward (regexp-quote target-heading) nil t)
          (progn
            ;; Move to the end of this section before inserting.
            ;; This ensures we're inserting at the correct level.
            (org-end-of-subtree t t) ; The 't t' arguments skip planning lines and drawers.
            ;; Insert a newline if necessary to separate from the previous content.
            (unless (looking-at "\n") (insert "\n"))
            (org-paste-subtree 2)) ; Paste the subtree as a subheading.
        ;; If the section doesn't exist, inform the user.
        (message "Category section '%s' not found." category))))


  (defun my-org-move-heading-to-category-and-create-file ()
    "Prompt user to move the current heading to a specific category and create a linked file."
    (let* ((category (completing-read "Category: " '("Project Execution" "Reference Review")))
           (heading-text (nth 4 (org-heading-components))))
      (my-org-create-and-link-file heading-text category)
      (my-org-move-heading-to-category category)))

  (defun my-org-process-heading-for-organize ()
    "Process current heading if its state is changed to 'ORGANIZE'."
    (when (string= org-state "ORGANIZE")
      (my-org-move-heading-to-category-and-create-file)))

  (add-hook 'org-after-todo-state-change-hook 'my-org-process-heading-for-organize)
#+end_src
** TODO Latex and Markup Support
#+begin_src emacs-lisp 
      (use-package markdown-mode)
      (use-package auctex)

    (use-package org
      :ensure t
      :config

  ;; Use utf-8 for HTML export
  (setq org-html-coding-system 'utf-8)

  ;; Function to export to HTML and open in browser
  (defun my-org-export-to-html-and-open ()
    "Export the current Org file to HTML and open it in the default browser."
    (interactive)
    (let ((output-file (org-html-export-to-html)))
      (browse-url (concat "file://" output-file))))

  ;; Bind the function to a key combination
  ;; (global-set-key (kbd "C-e H") 'my-org-export-to-html-and-open)
      
  (require 'ox-latex)
      (setq org-latex-listings 'minted) ;; Optional, for better code listings
      (add-to-list 'org-latex-packages-alist '("" "minted")) ;; Optional, for better code listings
      (add-to-list 'org-latex-packages-alist '("arabic" "arabtex"))
      (add-to-list 'org-latex-packages-alist '("" "fontspec"))
      
      ;; Use xelatex for better Unicode support
      (setq org-latex-compiler "xelatex")
      (setq org-latex-pdf-process
            '("xelatex -interaction nonstopmode -output-directory %o %f"
              "xelatex -interaction nonstopmode -output-directory %o %f"))

      ;; Define a new latex class with Arabic support
      (add-to-list 'org-latex-classes
                   '("article"
                     "\\documentclass{article}
    \\usepackage{arabtex}
    \\usepackage{utf8}
    \\setcode{utf8}
    \\usepackage{fontspec}
    \\newfontfamily\\arabicfont[Script=Arabic]{Amiri}"
                     ("\\section{%s}" . "\\section*{%s}")
                     ("\\subsection{%s}" . "\\subsection*{%s}")
                     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                     ("\\paragraph{%s}" . "\\paragraph*{%s}")
                     ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))

  (require 'ox-latex)
  (setq org-latex-pdf-process '("xelatex -interaction nonstopmode -output-directory %o %f"
                                "xelatex -interaction nonstopmode -output-directory %o %f"))
#+end_src 


** TODO Publishing
#+begin_src emacs-lisp :tangle no
  (use-package ox-publish
    :straight nil)
  (use-package simple-httpd)
  (use-package htmlize)
#+END_SRC


* Open and Annotate PDFs
#+begin_src emacs-lisp 
  (use-package pdf-tools
    :config
    (pdf-tools-install)
    (add-hook 'pdf-view-mode-hook 'pdf-view-midnight-minor-mode)
    (add-hook 'pdf-view-mode-hook
              (lambda ()
                (set (make-local-variable 'blink-cursor-mode) nil)))
    (setq-default pdf-view-display-size 'fit-page)
    (setq pdf-annot-activate-created-annotations t)
    (add-to-list 'auto-mode-alist '("\\.pdf\\'" . pdf-view-mode))
    :bind
    :custom
    (pdf-view-resize-factor 1.0))
#+end_src


* Buffer Management
** Ibuffer
#+begin_src emacs-lisp 
  (use-package ibuffer
    :straight nil)

  (use-package ibuf-ext
    :straight nil)

  (add-to-list 'ibuffer-never-show-predicates "^/dired")
  (add-to-list 'ibuffer-never-show-predicates "magit") ; hide Magit buffers

  (setq ibuffer-saved-filter-groups
        (quote (("default"
                 ("Dotfiles" (filename . "^\\."))
                 ("Messages"  (name . "^\\/"))
                 ("Org"       (mode . org-mode))
                 ("Planner"   (or
                               (name . "^\\/Calendar\\*$")
                               (name . "^\\/Org Agenda\\*$")))
                 ("Emacs"     (or
                               (name . "^\\/scratch\\*$")
                               (name . "^\\/Messages\\*$")))))))

  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-switch-to-saved-filter-groups "default")))
#+end_src
** Perspective
#+begin_src emacs-lisp 
  (use-package perspective
    :bind (
           ("C-x C-b" . persp-ibuffer)
           ("C-x k" . persp-kill-buffer* ))
    :custom
    (persp-mode-prefix-key (kbd "C-x C-x"))
    :init
    (setq persp-initial-frame-name "Main")
    (persp-mode))
#+end_src 


* Project Management
#+begin_src emacs-lisp 
  (use-package magit)
#+end_src


* Shell Support
#+begin_src emacs-lisp 

  (if (not (eq system-type 'windows-nt))
      (progn
        (use-package vterm
          :config (setq vterm-max-scrollback 10000))
        (use-package multi-vterm)

        ;; Some fancy project/perspective stuff.
        (defun my-project-vterm ()
          "Open a `vterm` in the current project's root directory."
          (interactive)
          (let ((project-root (project-root (project-current t))))
            (if project-root
                (let ((default-directory project-root))
                  (vterm (format "vterm: %s" project-root)))
              (message "Not in a project!"))))
        ;; (global-set-key (kbd "C-c p v") #'my-project-vterm)
        (defun project-switch-to-perspective ()
          "Switch to a perspective with the name of the current project."
          (interactive)
          (let ((project-name (file-name-nondirectory (directory-file-name (project-root (project-current t))))))
            (if (not (persp-switch project-name))
                (progn
                  (persp-switch project-name)
                  (dired (project-root (project-current t)))))))
        (global-set-key (kbd "C-x p p") 'project-switch-to-perspective)
        (advice-add 'project-switch-project :after #'project-switch-to-perspective)

        ))

#+end_src


* AI Integration 
** Copilot 
#+begin_src emacs-lisp  
  (use-package copilot
    :straight (:host github :repo "copilot-emacs/copilot.el" :files ("dist" "*.el"))
    :init (setq copilot-indent-offset-warning-disable t)
    :bind (:map copilot-completion-map
                ("M-<tab>" . 'copilot-accept-completion)
                ("M-TAB" . 'copilot-accept-completion)
                ("TAB" . 'copilot-accept-completion-by-word)
                ("<tab>" . 'copilot-accept-completion-by-word)))

#+end_src

** GPTEL 
#+begin_src emacs-lisp 
  (use-package gptel
    :custom
    (gptel-model "gpt-3.5-turbo")
    (gptel-default-mode 'org-mode)
    (gptel-prompt-prefix-alist
     '((markdown-mode . "# ")
       (org-mode . "* ")
       (text-mode . "# ")))
    :config
    (add-hook 'gptel-post-stream-hook 'gptel-auto-scroll)
    (add-hook 'gptel-post-response-functions 'gptel-end-of-response))

#+end_src

** Ollama
#+begin_src emacs-lisp :tangle no
  ;; to serve llama: OLLAMA_HOST=192.168.4.47:11434 ollama serve
  (gptel-make-ollama "Ollama"             ;Any name of your choosing
    :host "192.168.4.47:11434"               ;Where it's running
    :stream t                             ;Stream responses
    :models '("mistral:latest"
              "llama:latest"))          ;List of models
#+end_src


* Programming
** Flycheck
#+begin_src emacs-lisp 
  (use-package flycheck
    :ensure t
    :config
    ;; Don't enable automatically
    ;; (add-hook 'after-init-hook #'global-flycheck-mode))
    )
#+end_src
** Corfu
#+begin_src emacs-lisp 
  (use-package corfu
    ;; Optional customizations
    :custom
    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    :hook (prog-mode . corfu-mode)
    ;; Enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
    ;; be used globally (M-/).  See also the customization variable
    ;; `global-corfu-modes' to exclude certain modes.
    :init
    (global-corfu-mode))
  (with-eval-after-load 'corfu
    ;; Navigate completion list
    (define-key corfu-map (kbd "C-j") #'corfu-next)
    (define-key corfu-map (kbd "C-k") #'corfu-previous))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; TAB cycle if there are only few candidates
    (setq completion-cycle-threshold 3)

    ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
    ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (setq tab-always-indent 'complete))      (use-package corfu
    :straight t
    :config
    ;; Optionally use TAB for cycling, default is `corfu-complete'.
    (setq corfu-cycle t)
    ;; Optionally enable `corfu-mode' in all buffers.
    (global-set-key (kbd "M-RET") #'corfu-complete)
    (setq corfu-quit-at-boundary nil)
    (setq corfu-quit-no-match t))

  ;; Use Dabbrev with Corfu!
  (use-package dabbrev
    ;; Swap M-/ and C-M-/
    :bind (("M-/" . dabbrev-completion)
           ("C-M-/" . dabbrev-expand))
    :config
    (add-to-list 'dabbrev-ignored-buffer-regexps "\\` "))
  ;; Since 29.1, use `dabbrev-ignored-buffer-regexps' on older.
  ;; (add-to-list 'dabbrev-ignored-buffer-modes 'doc-view-mode)
  ;; (add-to-list 'dabbrev-ignored-buffer-modes 'pdf-view-mode))

  ;; (use-package eglot
  ;;   :config
  ;;   (setq eglot-autoshutdown t)
  ;;   (add-to-list 'eglot-server-programs '(haskell-mode . ("ghcide" "--lsp"))))

  (use-package nix-mode
    :mode "\\.nix\\'")
  (use-package haskell-mode
    :mode "\\.hs\\'")

#+end_src
** TODO Cape
#+begin_src emacs-lisp :tangle no
  ;; Add extensions
  (use-package cape
    ;; Bind dedicated completion commands
    ;; Alternative prefix keys: C-c p, M-p, M-+, ...
    :bind (("C-c p p" . completion-at-point) ;; capf
           ("C-c p t" . complete-tag)        ;; etags
           ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
           ("C-c p h" . cape-history)
           ("C-c p f" . cape-file)
           ("C-c p k" . cape-keyword)
           ("C-c p s" . cape-elisp-symbol)
           ("C-c p e" . cape-elisp-block)
           ("C-c p a" . cape-abbrev)
           ("C-c p l" . cape-line)
           ("C-c p w" . cape-dict)
           ("C-c p :" . cape-emoji)
           ("C-c p \\" . cape-tex)
           ("C-c p _" . cape-tex)
           ("C-c p ^" . cape-tex)
           ("C-c p &" . cape-sgml)
           ("C-c p r" . cape-rfc1345))
    :init
    ;; Add to the global default value of `completion-at-point-functions' which is
    ;; used by `completion-at-point'.  The order of the functions matters, the
    ;; first function returning a result wins.  Note that the list of buffer-local
    ;; completion functions takes precedence over the global list.
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-elisp-block)
    ;;(add-to-list 'completion-at-point-functions #'cape-history)
    ;;(add-to-list 'completion-at-point-functions #'cape-keyword)
    ;;(add-to-list 'completion-at-point-functions #'cape-tex)
    ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
    ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
    ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
    ;;(add-to-list 'completion-at-point-functions #'cape-dict)
    ;;(add-to-list 'completion-at-point-functions #'cape-elisp-symbol)
    ;;(add-to-list 'completion-at-point-functions #'cape-line)
    )
#+end_src


* Look and Visuals

** Themes
#+begin_src emacs-lisp
  (if (display-graphic-p)
      (progn

        (use-package solaire-mode
          :config
          (solaire-global-mode +1))

        (use-package telephone-line
          :init
          (setq telephone-line-primary-left-separator 'telephone-line-cubed-left
                telephone-line-secondary-left-separator 'telephone-line-cubed-hollow-left
                telephone-line-primary-right-separator 'telephone-line-cubed-right
                telephone-line-secondary-right-separator 'telephone-line-cubed-hollow-right)
          (setq telephone-line-height 24
                telephone-line-evil-use-short-tag t)
          (telephone-line-mode t))

        ;; Some icons and theme
        (use-package ef-themes)
        (use-package modus-themes)
        (use-package all-the-icons)
        (use-package nerd-icons-completion
          :config
          (nerd-icons-completion-mode))

        (use-package doom-themes
          :ensure t
          :config
          ;; Global settings (defaults)
          (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
                doom-themes-enable-italic t) ; if nil, italics is universally disabled
          (load-theme 'doom-one t)           

          ;; Enable flashing mode-line on errors
          (doom-themes-visual-bell-config)
          ;; Enable custom neotree theme (all-the-icons must be installed!)
                                          ;(doom-themes-neotree-config)
          ;; or for treemacs users
                                          ;(setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
                                          ;(doom-themes-treemacs-config)
          ;; Corrects (and improves) org-mode's native fontification.
          (doom-themes-org-config))
        (use-package nano-theme
          :ensure nil
          :defer t
          :straight (:host github :repo "rougier/nano-theme"))
        ))
  (set-face-attribute 'default nil :font "JetBrains Mono" :height 120)
#+end_src

** Dealing with Parentheses

#+begin_src emacs-lisp 
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

  (use-package smartparens
    :straight t
    :config
    (require 'smartparens-config)
    (smartparens-global-mode 1))

  (use-package highlight-parentheses
    :config
    (define-globalized-minor-mode global-highlight-parentheses-mode
      highlight-parentheses-mode
      (lambda () (highlight-parentheses-mode t)))
    (global-highlight-parentheses-mode t))

  (setq blink-matching-paren t)
#+end_src



* Scratch Area

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package pandoc-mode
    :hook
    (markdown-mode . pandoc-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle no
  (defun my-org-sanitize-heading (heading-text)
    "Sanitize HEADING-TEXT to be file-system friendly."
    (replace-regexp-in-string "[^[:alnum:]-]" "" (downcase heading-text)))

  (defun my-org-create-and-link-file (heading-text)
    "Create a file from HEADING-TEXT and insert a link to it below the heading."
    (let* ((sanitized-heading (my-org-sanitize-heading heading-text))
           (file-name (concat org-directory "/" sanitized-heading ".org")))
      (unless (file-exists-p file-name)
        (with-temp-buffer
          (insert (concat "#+title: " heading-text "\n"))
          (write-file file-name))
        (message "Created file: %s" file-name)
        ;; Insert link
        (save-excursion
          (org-back-to-heading t)
          (end-of-line)
          (insert (concat "\n[[file:" file-name "][Link to detailed note]]\n"))))))

  (defun my-org-move-heading-to-category ()
    "Prompt user to move the current heading to a specific category."
    (let* ((category (completing-read "Category: " '("Projects" "Research")))
           (target-heading (concat "* " category)))
      (org-cut-subtree)
      (goto-char (point-min))
      (if (re-search-forward (regexp-quote target-heading) nil t)
          (progn
            ;; Ensure we're at the end of the target category heading line.
            (end-of-line)
            ;; Look for the next heading to determine where to paste the subtree.
            (if (re-search-forward "^\\*" nil t)
                (progn
                  ;; Move back to the beginning of the next heading.
                  (beginning-of-line)
                  ;; Paste the subtree here, making it a subheading of the target category.
                  (org-paste-subtree 2))  ; The argument '2' increases the heading level by one.
              ;; If no next heading is found, just paste at the end of the buffer.
              (goto-char (point-max))
              (org-paste-subtree 2)))
        ;; If the target category does not exist, create it at the end of the document.
        (goto-char (point-max))
        (unless (looking-back "\n\n" nil)
          (insert "\n\n"))  ; Ensure proper spacing before adding a new category.
        (insert target-heading "\n")
        (org-paste-subtree 2)  ; Paste the heading as a subheading under the newly created category.
        (message "Created new '%s' section." category))))

  (defun my-org-process-heading-for-organize ()
    "Process current heading if its state is changed to 'ORGANIZE'."
    (when (string= org-state "ORGANIZE")
      (let ((heading-text (nth 4 (org-heading-components))))
        (my-org-create-and-link-file heading-text)
        (my-org-move-heading-to-category))))

  (add-hook 'org-after-todo-state-change-hook 'my-org-process-heading-for-organize)

#+END_SRC

#+begin_src emacs-lisp  :tangle no 
  (defun my-org-get-sanitized-file-name (heading-text)
    "Return a sanitized, title-cased file name from HEADING-TEXT."
    (let* ((title-case-heading (s-titleize heading-text))
           (sanitized-heading (replace-regexp-in-string "[^[:alnum:]]" "" title-case-heading)))
      (concat org-directory "/" sanitized-heading ".org")))

  (defun my-org-create-file (file-name heading-text)
    "Create an Org file named FILE-NAME with initial content from HEADING-TEXT."
    (when (not (file-exists-p file-name))
      (with-temp-buffer
        (insert (concat "* " heading-text "\n\n"))
        (write-file file-name))
      (message "Created file: %s" file-name)))

  (defun my-org-add-link-property (file-name)
    "Add a property to the current heading with a link to FILE-NAME."
    (let ((file-link (format "file:%s" file-name)))
      ;; (org-set-property "FILE_LINK" file-link)
      ;; Optionally, insert a clickable link below the heading
      (let ((link-text (format "[[%s][%s file]]\n" file-link "View")))
        (org-back-to-heading t)
        (forward-line 1)
        (insert link-text))))

  (defun my-org-move-heading-to-status ()
    "Prompt user to move the current heading to a 'Project Status' or 'Research Status' section."
    (let ((choice (completing-read "Move to: " '("Projects" "Research"))))
      (org-cut-subtree)
      (save-excursion
        (goto-char (point-min))
        (if (search-forward-regexp (concat "^\\** " choice) nil t)
            (progn
              (goto-char (match-end 0))
              (org-paste-subtree))
          (message "Projects section not found.")))))

  (defun my-org-process-heading ()
    "Process the current heading based on its TODO state."
    (when (equal org-state "ORGANIZE")
      (let* ((heading-text (nth 4 (org-heading-components)))
             (file-name (my-org-get-sanitized-file-name heading-text)))
        (my-org-create-file file-name heading-text)
        (my-org-add-link-property file-name)
        (my-org-move-heading-to-status))))

  (add-hook 'org-after-todo-state-change-hook 'my-org-process-heading)
#+end_src

#+BEGIN_SRC emacs-lisp :tangle no 
  (use-package s)
  (defun my-org-open-at-point-same-window (orig-fun &rest args)
    "Advise `org-open-at-point' to open links in the same window."
    (let ((org-link-frame-setup (cons '(file . find-file) org-link-frame-setup)))
      (apply orig-fun args)))
  (advice-add 'org-open-at-point :around #'my-org-open-at-point-same-window)
#+END_SRC

#+begin_src emacs-lisp :tangle no
  (defun get-buffer-path ()
    "Get the path of the current buffer and copy it to the clipboard"
    (interactive)
    (let ((path (buffer-file-name)))
      (when path
        (kill-new path)
        (message "Path '%s' copied to the clipboard" path)))
    )  
#+end_src
* Test
#+BEGIN_SRC emacs-lisp :tangle no
  ;; Zotxt
  (use-package zotxt)
  (add-hook 'org-mode-hook (lambda () (org-zotxt-mode 1)))

  ;; Org-noter
  (use-package org-noter)
  (setq org-noter-notes-search-path '("~/org/roam"))

#+END_SRC
