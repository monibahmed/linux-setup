#+TITLE: My .emacs file
#+STARTUP: content
#+PROPERTY: header-args:emacs-lisp :results output silent :tangle ~/.emacs

* Benchmarking Emacs Boot time
Benchmark Emacs startup time
#+begin_src emacs-lisp
  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  ;; Profile emacs startup
  (add-hook
   'emacs-startup-hook
   (lambda ()
     (message "*** Emacs loaded in %s seconds with %d garbage collections."
              (emacs-init-time "%.2f")
              gcs-done)))
#+end_src

* Basic Emacs Settings
#+begin_src emacs-lisp 
  ;; Emacs options for different things
  (setq inhibit-splash-screen t)
  (setq make-backup-files nil)
  (toggle-scroll-bar -1)
  (tool-bar-mode     -1)
  (menu-bar-mode     -1)
  (global-auto-revert-mode 1)
  (if (display-graphic-p)
      (progn (menu-bar-mode     1)))
  (tooltip-mode      -1)
  (setq make-backup-files nil) ; stop creating backup~ files
  (setq auto-save-default nil) ; stop creating #autosave# files
  (setq package-enable-at-startup nil)
  (setq vc-follow-symlinks nil)
  ;; Trying to speed up emacs load
  (setq jit-lock-stealth-time nil)
  (setq jit-lock-defer-time nil)
  (setq jit-lock-defer-time 0.05)
  (setq jit-lock-stealth-load 200)
  (setq custom-file (concat user-emacs-directory "custom.el"))

  ;; disable scrollbars
  (customize-set-variable 'scroll-bar-mode nil)
  (customize-set-variable 'horizontal-scroll-bar-mode nil)

  ;;doesn't work as expected
  ;;(add-to-list 'default-frame-alist '(undecorated . t))
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

* Package Manager
Using Straight.el for package management.

#+begin_src emacs-lisp
  (setq straight-vc-git-default-clone-depth 1)
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
  ;;  (setq use-package-always-defer t)
#+end_src

* Org Mode Setup
Because this is one of the main reasons to use Emacs:

#+begin_src emacs-lisp
  ;; Organize your notes and maybe part of your life

  (use-package org
    :init
    (setq org-confirm-babel-evaluate nil)
    (setq org-startup-indented  t)
    (setq org-startup-numerated t)
    :hook (visual-line-mode))

  ;; Org Babel for code blocks
  (use-package ob
    :straight nil
    :init
    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (setq org-confirm-babel-evaluate nil)
    :config

    ;; load more languages for org-babel
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((shell . t)
       (emacs-lisp . t)
       (python . t)
       (scheme . t)
       ;; (jupyter . t)
       )))
#+end_src
 
#+begin_src emacs-lisp
  ;; Automatically tangle our Emacs.org config file when we save it
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/linux-setup/emacs-init.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (message "Tangling new .emacs")
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
#+end_src

* Evil Muwwaaahhhahahahaa!
Evil mode for keybinding and most of efficiency goodness

#+begin_src emacs-lisp
  ;; enable evil mode
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-d-scroll t)
    (setq evil-want-C-i-jump nil)
    (setq evil-undo-system 'undo-tree)
    (setq evil-insert-state-cursor '(bar))
    (setq evil-normal-state-cursor '(box))
    ;;(setq evil-motion-state-modes (append evil-emacs-state-modes evil-motion-state-modes))
    ;;(setq evil-emacs-state-modes nil)
    ;;(setq evil-want-minibuffer t)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
    ;;(evil-set-initial-state 'messages-buffer-mode 'normal)
    ;;(evil-set-initial-state 'dashboard-mode 'normal)
    )

  (use-package evil-collection
    ;;:custom (evil-collection-setup-minibuffer t)
    :after evil
    :config
    (evil-collection-init))

  (use-package evil-surround
    :after evil
    :config
    (global-evil-surround-mode 1))
  (use-package evil-snipe
    :init (evil-snipe-mode 1))
  (use-package evil-matchit
    :after evil
    :init
    (setq evilmi-shortcut "M-m")
    (global-evil-matchit-mode 1))
  (use-package evil-lion
    :after evil
    :config
    (evil-lion-mode))
  (use-package evil-numbers
    :after evil)
  (use-package vimish-fold
    :after evil)
  (use-package evil-vimish-fold
    :after vimish-fold
    :hook ((prog-mode conf-mode text-mode) . evil-vimish-fold-mode))

  (define-key evil-normal-state-map (kbd "C-=") 'evil-numbers/inc-at-pt)
  (define-key evil-visual-state-map (kbd "C-=") 'evil-numbers/inc-at-pt)
  (define-key evil-normal-state-map (kbd "C--") 'evil-numbers/dec-at-pt)
  (define-key evil-visual-state-map (kbd "C--") 'evil-numbers/dec-at-pt)
#+end_src

* Useful packages
For using getting around and understanding Emacs
** Helper Packages
For extending Emacs functionality
#+begin_src emacs-lisp

  ;;some helper packages
  ;;Undo/Redo in Emacs
  (use-package undo-tree
    :init (global-undo-tree-mode))
  ;;notified if the definition of a function you are customizing change
  (use-package el-patch)
  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init (savehist-mode))
  ;; a better window manager?
  (use-package ace-window
    :bind ("C-c o" . 'ace-window)
    :init
    (setq aw-dispatch-always t)
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
  ;; divides search pattern into space separated components
  (use-package orderless
    :custom
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles basic partial-completion)))))
  ;; what key should you push next? not needed embark
  (use-package which-key
    :init (which-key-mode))
  ;; Enable rich annotations using the Marginalia package
  (use-package marginalia
    ;; Either bind `marginalia-cycle' globally or only in the minibuffer
    :bind (("M-A" . marginalia-cycle)
           :map minibuffer-local-map
           ("M-A" . marginalia-cycle))
    :init
    (marginalia-mode))
  (use-package restart-emacs)

#+end_src
** Customize Keyboard Shortcuts
#+begin_src emacs-lisp
  ;; Customize your keyboard shortcuts
  (use-package hydra)
  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  (use-package general
    :config
    (general-create-definer rune/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (rune/leader-keys
      "t"  '(:ignore t :which-key "Toggles")
      "tt" '(load-theme :which-key "Choose Theme")
      "ts" '(hydra-text-scale/body :which-key "Scale Text")
      "tl" '(lambda() (interactive)(load-theme 'doom-one-light t) :which-key "Light Theme")
      "td" '(lambda() (interactive)(load-theme 'doom-moonlight t) :which-key "Dark Theme") "xb" '(ibuffer :which-key "ibuffer")
      "xv" '(multi-vterm-project :which-key "multi-vterm-project")
      ;;"vn" '(multi-vterm :which-key 'pmi/named-term)
      ;;"xn" '(treemac :which-key "Tree Browser")
      "fe" '(lambda() (interactive)(find-file "~/linux-setup/emacs-init.org") :which-key "emacs-init.org")
      "fz" '(lambda() (interactive)(find-file "~/.zshrc") :which-key ".zshrc")
      "fn" '(lambda() (interactive)(find-file "~/.notes") :which-key ".notes")
      )
    )
  ;;(global-set-key (kbd "C-e") 'end-of-line)
#+end_src

** Do Stuff in Emacs Easily
#+begin_src emacs-lisp

  ;; Completion frameworks and doing stuff
  (use-package vertico
    :bind (:map
           vertico-map
           ("C-j" . vertico-next)
           ("C-k" . vertico-previous)
           ("C-f" . vertico-exit)
           :map minibuffer-local-map
           ("M-h" . backward-kill-word))
    :custom (vertico-cycle t)
    :init (vertico-mode))

  (use-package consult
    :bind (("C-c s" . consult-line)
           ("C-M-l" . consult-imenu)
           ("C-r" . consult-history)
           ))

  ;;Do commands and operatioms on buffers or synbols
  (use-package embark
    :bind (("C-c e" . embark-act)
           ("M-." . embark-dwim)
           ("C-h B" . embark-bindings))
    :init (setq prefix-help-command #'embark-prefix-help-command))
  (use-package embark-consult
    :after (embark consult)
    :hook (embark-collect-mode . consult-preview-at-point-mode))


#+end_src

* Project Management
Manage your projects

#+begin_src emacs-lisp
  ;; Project management
  (use-package magit)
#+end_src

** Buffer Management

#+begin_src emacs-lisp

  (use-package ibuffer
    :straight nil)
  ;;:bind ("C-x C-b" . ibuffer))
  ;; (add-to-list 'ibuffer-never-show-predicates "^\\*")

  (use-package ibuf-ext
    :straight nil)
  (setq ibuffer-saved-filter-groups
        (quote (("default"
                 ("Dotfiles" (or (name . "^\\.")))
                 ("Messages" (or (name . "^\\*")))
                 ("Magit" (or (name . "^\\magit*")))
                 ))))

  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-switch-to-saved-filter-groups "default")))


#+end_src

#+begin_src emacs-lisp

  (use-package perspective
    :bind ("C-x C-b" . persp-ibuffer)
    :custom
    (persp-mode-prefix-key (kbd "C-x C-x"))
    :init
    (persp-mode))

#+end_src 

* Themes
Now the looks

#+begin_src emacs-lisp
  ;; themes at the end
  (if (display-graphic-p)
      (progn
        (use-package all-the-icons)
        (use-package doom-modeline
          :init (doom-modeline-mode t))
        (use-package doom-themes
          :config
          ;; Global settings (defaults)
          (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
                doom-themes-enable-italic t) ; if nil, italics is universally disabled
          (load-theme 'doom-moonlight t)
          ;; Enable flashing mode-line on errors
          (doom-themes-visual-bell-config)
          ;; Enable custom neotree theme (all-the-icons must be installed!)
          ;;(doom-themes-neotree-config)
          ;; or for treemacs users
          ;; (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
          ;;(doom-themes-treemacs-config)
          ;; Corrects (and improves) org-mode's native fontification.
          (doom-themes-org-config))
        ))
#+end_src

* Mac Os Specific
** Get Emacs Variables from Shell
#+begin_src emacs-lisp

  (if (eq system-type 'darwin)
      (progn
        (message "Emacs running in Mac OS")
        (setq frame-resize-pixelwise t)
        (setq mac-command-modifier 'meta)

        (use-package exec-path-from-shell)
        (dolist (var '("ZSH" "JAVA_HOME" "LANG" "CONDA_SHLVL"
                       "CONDA_PREFIX" "SSH_AUTH_SOCK" "CONDA_PYTHON_EXE"
                       "CONDA_DEFAULT_ENV" "CONDA_PROMPT_MODIFIER" ))
          (add-to-list 'exec-path-from-shell-variables var))
        (exec-path-from-shell-initialize)
        ))
#+end_src

* MacOS and Linux
** Shell Support
#+begin_src emacs-lisp

  (if (not (eq system-type 'windows-nt))
      (progn
        (use-package vterm
          :config (setq vterm-max-scrollback 10000))
        (use-package multi-vterm)
        (use-package vterm-toggle
          :bind ("<f9>" . vterm-toggle))
        (setq vterm-toggle-fullscreen-p nil)
        (add-to-list 'display-buffer-alist
                     '((lambda (buffer-or-name _)
                         (let ((buffer (get-buffer buffer-or-name)))
                           (with-current-buffer buffer
                             (or (equal major-mode 'vterm-mode)
                                 (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                       (display-buffer-reuse-window display-buffer-at-bottom)
                       ;;(display-buffer-reuse-window display-buffer-in-direction)
                       ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                       ;;(direction . bottom)
                       ;;(dedicated . t) ;dedicated is supported in emacs27
                       (reusable-frames . visible)
                       (window-height . 0.3)))
        ))

#+end_src

#+begin_src emacs-lisp :tangle no

  (define-key vterm-mode-map (kbd "C-q") #'vterm-send-next-key)
  (push (list "find-file-below"
              (lambda (pathj)
                (if-let* ((buf (find-file-noselect path))
                          (window (display-buffer-below-selected buf nil)))
                    (select-window window)
                  (message "Failed to open file: %s" path))))
        vterm-eval-cmds)

  (defun pmi/named-term (term-name)
    "Generate a terminal with buffer name TERM-NAME."
    (interactive "sTerminal purpose: ")
    (vterm (concat "term-" term-name)))
  ))

  (use-package shell-pop)

  (custom-set-variables
   ;;'(shell-pop-default-directory "/Users/kyagi/git")
   '(shell-pop-shell-type (quote ("ansi-term" "*ansi-term*" (lambda nil (ansi-term shell-pop-term-shell)))))
   '(shell-pop-term-shell "/bin/zsh")
   '(shell-pop-universal-key "C-`")
   '(shell-pop-window-size 30)
   '(shell-pop-full-span t)
   '(shell-pop-window-position "bottom")
   ;;'(shell-pop-autocd-to-working-dir t)
   ;;'(shell-pop-restore-window-configuration t)
   ;;'(shell-pop-cleanup-buffer-at-process-exit t))
   )
#+end_src

* TODO Jupyter Mode
#+Begin_src emacs-lisp :tangle no
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (use-package zmq)
  (use-package jupyter
    :after (:all org python))
  ;;(org-babel-jupyter-override-src-block "python")
  (setq ob-async-no-async-languages-alist '("jupyter-python" "jupyter-julia"))
#+end_src

Install Conda

#+begin_src emacs-lisp :tangle no
  (use-package conda
    :config
    (conda-env-initialize-interactive-shells)
    (conda-env-initialize-eshell)
    (conda-env-autoactivate-mode t)
    (setq conda-anaconda-home (expand-file-name "~/miniconda3/"))
    (setq conda-env-home-directory (expand-file-name "~/miniconda3/"))
    (setq conda-env-subdirectory "envs"))
#+end_src



#+BEGIN_SRC python :session  :tangle no
  x = 'foo'
  y = 'bar'
  x + ' ' + y
#+END_SRC

#+RESULTS:
: foo bar

#+BEGIN_SRC python :session :tangle no
  import sys
  sys.executable
#+END_SRC

#+RESULTS:
: /Users/monibahmed/miniconda3/bin/python
* TODO Powerline/Modeline
* TODO Persistent Emacs like TMUX
* TODO Project Tree Browser
* TODO Eshell
Completions

* Programming
** General Setup
** Scala LSP-Mode
#+begin_src emacs-lisp 
  ;; Enable scala-mode for highlighting, indentation and motion commands
  (use-package scala-mode
    :interpreter ("scala" . scala-mode))

  ;; Enable sbt mode for executing sbt commands
  (use-package sbt-mode
    :commands sbt-start sbt-command
    :config
    ;; WORKAROUND: https://github.com/ensime/emacs-sbt-mode/issues/31
    ;; allows using SPACE when in the minibuffer
    (substitute-key-definition
     'minibuffer-complete-word
     'self-insert-command
     minibuffer-local-completion-map)
    ;; sbt-supershell kills sbt-mode:  https://github.com/hvesalai/emacs-sbt-mode/issues/152
    (setq sbt:program-options '("-Dsbt.supershell=false")))

  ;; Enable nice rendering of diagnostics like compile errors.
  (use-package flycheck
    :init (global-flycheck-mode))

  (use-package lsp-mode
    ;; Optional - enable lsp-mode automatically in scala files
    ;; You could also swap out lsp for lsp-deffered in order to defer loading
    :hook  (scala-mode . lsp)
    (lsp-mode . lsp-lens-mode)
    :config
    ;; Uncomment following section if you would like to tune lsp-mode performance according to
    ;; https://emacs-lsp.github.io/lsp-mode/page/performance/
    (setq gc-cons-threshold 100000000) ;; 100mb
    (setq read-process-output-max (* 1024 1024)) ;; 1mb
    (setq lsp-idle-delay 0.500)
    (setq lsp-log-io nil)
    (setq lsp-completion-provider :capf)
    (setq lsp-prefer-flymake nil))

  ;; Add metals backend for lsp-mode
  (use-package lsp-metals)

  ;; Enable nice rendering of documentation on hover
  ;;   Warning: on some systems this package can reduce your emacs responsiveness significally.
  ;;   (See: https://emacs-lsp.github.io/lsp-mode/page/performance/)
  ;;   In that case you have to not only disable this but also remove from the packages since
  ;;   lsp-mode can activate it automatically.
  (use-package lsp-ui)

  ;; lsp-mode supports snippets, but in order for them to work you need to use yasnippet
  ;; If you don't want to use snippets set lsp-enable-snippet to nil in your lsp-mode settings
  ;; to avoid odd behavior with snippets and indentation
  (use-package yasnippet)

  ;; Use company-capf as a completion provider.
  ;;
  ;; To Company-lsp users:
  ;;   Company-lsp is no longer maintained and has been removed from MELPA.
  ;;   Please migrate to company-capf.
  (use-package company
    :hook (scala-mode . company-mode)
    :config
    (setq lsp-completion-provider :capf))

  ;; Posframe is a pop-up tool that must be manually installed for dap-mode
  (use-package posframe)

  ;; Use the Debug Adapter Protocol for running tests and debugging
  (use-package dap-mode
    :hook
    (lsp-mode . dap-mode)
    (lsp-mode . dap-ui-mode))
#+end_src

** SystemVerilog

#+begin_src emacs-lisp

  (straight-use-package
   '(verilog-mode :type git :host github :repo "veripool/verilog-mode"))

#+end_src
** Python 
** Haskell
#+begin_src emacs-lisp
  (use-package haskell-mode)

  (use-package lsp-haskell
    :defer t
    :init
    (add-hook 'haskell-mode-hook
              (lambda ()
                (lsp)
                (setq evil-shift-width 2)))
    (add-hook 'haskell-literate-mode-hook #'lsp))

#+end_src
* Windows Setup

#+begin_src emacs-lisp

  (if (eq system-type 'windows-nt)
      (progn 
        (message "Emacs Running in Windows")
        (menu-bar-mode -1)
        (use-package powershell
          :config
          ;; Change default compile command for powershell
          (add-hook 'powershell-mode-hook
                    (lambda ()
                      (set (make-local-variable 'compile-command)
                           (format "powershell.exe -NoLogo -NonInteractive -Command \"& '%s'\"" (buffer-file-name)))))
          )
        (defun run-bash ()
          "Run Bash"
          (interactive)
          (async-shell-command "C:/windows/system32/bash.exe"
                               nil
                               nil))
        (defun run-powershell ()
          "Run powershell"
          (interactive)
          (async-shell-command "C:/Program Files/PowerShell/7/pwsh.exe"
                               nil
                               nil))
        )) 

#+end_src
